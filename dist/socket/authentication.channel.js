"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function test(msg, server) {
    return server.services.tokenStore
        .tokenToUser(msg.key)
        .then(function (v) {
        if (!!v) {
            msg.client.user = v;
            msg.client.join('authenticated');
            console.log('authenticated user');
            return {
                response: 'testkey',
                you: v,
                auth: true,
                token: msg.key,
            };
        }
        else {
            return {
                response: 'testkey',
                auth: false,
            };
        }
    })
        .then(function (response) {
        if (response.auth === true && server.extensions['loginExtras']) {
            return server.extensions['loginExtras'](response.you).then(function (r) {
                return Object.assign({}, response, { included: r });
            });
        }
        else {
            return response;
        }
    })
        .then(function (response) {
        return {
            broadcast: false,
            key: msg.responseKey,
            msg: response,
        };
    });
}
function start(msg, server) {
    msg.client.join(msg.nonce);
    return {
        key: msg.nonce,
        broadcast: false,
        msg: {
            response: 'startauth',
            types: server.config.authTypes.map(function (v) {
                return {
                    name: v.name,
                    iconUrl: v.iconUrl,
                    url: "" + server.baseUrl() + server.config.authRoot + "?method=" + v.name + "&nonce=" + msg.nonce,
                };
            }),
        },
    };
}
exports.AuthenticationChannel = {
    auth: function (msg, strut) {
        return Promise.resolve().then(function () {
            if (msg.request === 'startauth') {
                return start(msg, strut);
            }
            else if (msg.request === 'testkey') {
                return test(msg, strut);
            }
            else {
                return {
                    broadcast: false,
                    key: 'error',
                    msg: {
                        response: 'invalidRequest',
                    },
                };
            }
        });
    },
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zb2NrZXQvYXV0aGVudGljYXRpb24uY2hhbm5lbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQWlCQSxjQUNFLEdBQWlDLEVBQ2pDLE1BQW1CO0lBRW5CLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVU7U0FDOUIsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7U0FDcEIsSUFBSSxDQUFDLFVBQUEsQ0FBQztRQUNMLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ1IsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO1lBQ3BCLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBQ2pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FBQztZQUNsQyxNQUFNLENBQUM7Z0JBQ0wsUUFBUSxFQUFFLFNBQVM7Z0JBQ25CLEdBQUcsRUFBRSxDQUFDO2dCQUNOLElBQUksRUFBRSxJQUFJO2dCQUNWLEtBQUssRUFBRSxHQUFHLENBQUMsR0FBRzthQUNmLENBQUM7UUFDSixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixNQUFNLENBQUM7Z0JBQ0wsUUFBUSxFQUFFLFNBQVM7Z0JBQ25CLElBQUksRUFBRSxLQUFLO2FBQ1osQ0FBQztRQUNKLENBQUM7SUFDSCxDQUFDLENBQUM7U0FDRCxJQUFJLENBQUMsVUFBQyxRQUFzQjtRQUMzQixFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxLQUFLLElBQUksSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvRCxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsQ0FBQztnQkFDMUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3RELENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUNsQixDQUFDO0lBQ0gsQ0FBQyxDQUFDO1NBQ0QsSUFBSSxDQUFDLFVBQUMsUUFBc0I7UUFDM0IsTUFBTSxDQUFDO1lBQ0wsU0FBUyxFQUFFLEtBQUs7WUFDaEIsR0FBRyxFQUFFLEdBQUcsQ0FBQyxXQUFXO1lBQ3BCLEdBQUcsRUFBRSxRQUFRO1NBQ2QsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQUVELGVBQ0UsR0FBK0IsRUFDL0IsTUFBbUI7SUFFbkIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNCLE1BQU0sQ0FBQztRQUNMLEdBQUcsRUFBRSxHQUFHLENBQUMsS0FBSztRQUNkLFNBQVMsRUFBRSxLQUFLO1FBQ2hCLEdBQUcsRUFBRTtZQUNILFFBQVEsRUFBRSxXQUFXO1lBQ3JCLEtBQUssRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDO2dCQUNsQyxNQUFNLENBQUM7b0JBQ0wsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJO29CQUNaLE9BQU8sRUFBRSxDQUFDLENBQUMsT0FBTztvQkFDbEIsR0FBRyxFQUFFLEtBQUcsTUFBTSxDQUFDLE9BQU8sRUFBRSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxnQkFDL0MsQ0FBQyxDQUFDLElBQUksZUFDRSxHQUFHLENBQUMsS0FBTztpQkFDdEIsQ0FBQztZQUNKLENBQUMsQ0FBQztTQUNIO0tBQ0YsQ0FBQztBQUNKLENBQUM7QUFFWSxRQUFBLHFCQUFxQixHQUFtQjtJQUNuRCxJQUFJLEVBQUUsVUFBQyxHQUEwQixFQUFFLEtBQWtCO1FBQ25ELE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUMzQjtZQUNFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQztnQkFDaEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDM0IsQ0FBQztZQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQzFCLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDTixNQUFNLENBQUM7b0JBQ0wsU0FBUyxFQUFFLEtBQUs7b0JBQ2hCLEdBQUcsRUFBRSxPQUFPO29CQUNaLEdBQUcsRUFBRTt3QkFDSCxRQUFRLEVBQUUsZ0JBQWdCO3FCQUMzQjtpQkFDRixDQUFDO1lBQ0osQ0FBQztRQUNILENBQUMsQ0FDRixDQUFDO0lBQ0osQ0FBQztDQUNGLENBQUMiLCJmaWxlIjoic29ja2V0L2F1dGhlbnRpY2F0aW9uLmNoYW5uZWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBTb2NrZXRJTyBmcm9tICdzb2NrZXQuaW8nO1xuaW1wb3J0IHsgU3RydXRTZXJ2ZXIgfSBmcm9tICcuLi9kYXRhVHlwZXMnO1xuaW1wb3J0IHtcbiAgU2luZ2xldG9uUmVxdWVzdCxcbiAgQXV0aGVudGljYXRpb25SZXF1ZXN0LFxuICBUZXN0S2V5QXV0aGVudGljYXRpb25SZXF1ZXN0LFxuICBTdGFydEF1dGhlbnRpY2F0aW9uUmVxdWVzdCxcbiAgU3RhcnRSZXNwb25zZSxcbiAgVGVzdFJlc3BvbnNlLFxuICBBdXRoZW50aWNhdGlvblJlc3BvbnNlLFxuICBTb2NrZXREaXNwYXRjaCxcbiAgUmVzcG9uc2VFbnZlbG9wZSxcbiAgQXV0aGVudGljYXRlZFNvY2tldCxcbn0gZnJvbSAnLi9kYXRhVHlwZXMnO1xuXG5pbXBvcnQgeyBDaGFubmVsUmVxdWVzdCB9IGZyb20gJy4vZGF0YVR5cGVzJztcblxuZnVuY3Rpb24gdGVzdChcbiAgbXNnOiBUZXN0S2V5QXV0aGVudGljYXRpb25SZXF1ZXN0LFxuICBzZXJ2ZXI6IFN0cnV0U2VydmVyLFxuKTogUHJvbWlzZTxSZXNwb25zZUVudmVsb3BlPFRlc3RSZXNwb25zZT4+IHtcbiAgcmV0dXJuIHNlcnZlci5zZXJ2aWNlcy50b2tlblN0b3JlXG4gICAgLnRva2VuVG9Vc2VyKG1zZy5rZXkpXG4gICAgLnRoZW4odiA9PiB7XG4gICAgICBpZiAoISF2KSB7XG4gICAgICAgIG1zZy5jbGllbnQudXNlciA9IHY7XG4gICAgICAgIG1zZy5jbGllbnQuam9pbignYXV0aGVudGljYXRlZCcpO1xuICAgICAgICBjb25zb2xlLmxvZygnYXV0aGVudGljYXRlZCB1c2VyJyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcmVzcG9uc2U6ICd0ZXN0a2V5JyxcbiAgICAgICAgICB5b3U6IHYsXG4gICAgICAgICAgYXV0aDogdHJ1ZSxcbiAgICAgICAgICB0b2tlbjogbXNnLmtleSxcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcmVzcG9uc2U6ICd0ZXN0a2V5JyxcbiAgICAgICAgICBhdXRoOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9KVxuICAgIC50aGVuKChyZXNwb25zZTogVGVzdFJlc3BvbnNlKSA9PiB7XG4gICAgICBpZiAocmVzcG9uc2UuYXV0aCA9PT0gdHJ1ZSAmJiBzZXJ2ZXIuZXh0ZW5zaW9uc1snbG9naW5FeHRyYXMnXSkge1xuICAgICAgICByZXR1cm4gc2VydmVyLmV4dGVuc2lvbnNbJ2xvZ2luRXh0cmFzJ10ocmVzcG9uc2UueW91KS50aGVuKHIgPT4ge1xuICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZSwgeyBpbmNsdWRlZDogciB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICB9XG4gICAgfSlcbiAgICAudGhlbigocmVzcG9uc2U6IFRlc3RSZXNwb25zZSkgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYnJvYWRjYXN0OiBmYWxzZSxcbiAgICAgICAga2V5OiBtc2cucmVzcG9uc2VLZXksXG4gICAgICAgIG1zZzogcmVzcG9uc2UsXG4gICAgICB9O1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBzdGFydChcbiAgbXNnOiBTdGFydEF1dGhlbnRpY2F0aW9uUmVxdWVzdCxcbiAgc2VydmVyOiBTdHJ1dFNlcnZlcixcbik6IFJlc3BvbnNlRW52ZWxvcGU8U3RhcnRSZXNwb25zZT4ge1xuICBtc2cuY2xpZW50LmpvaW4obXNnLm5vbmNlKTtcbiAgcmV0dXJuIHtcbiAgICBrZXk6IG1zZy5ub25jZSxcbiAgICBicm9hZGNhc3Q6IGZhbHNlLFxuICAgIG1zZzoge1xuICAgICAgcmVzcG9uc2U6ICdzdGFydGF1dGgnLFxuICAgICAgdHlwZXM6IHNlcnZlci5jb25maWcuYXV0aFR5cGVzLm1hcCh2ID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBuYW1lOiB2Lm5hbWUsXG4gICAgICAgICAgaWNvblVybDogdi5pY29uVXJsLFxuICAgICAgICAgIHVybDogYCR7c2VydmVyLmJhc2VVcmwoKX0ke3NlcnZlci5jb25maWcuYXV0aFJvb3R9P21ldGhvZD0ke1xuICAgICAgICAgICAgdi5uYW1lXG4gICAgICAgICAgfSZub25jZT0ke21zZy5ub25jZX1gLFxuICAgICAgICB9O1xuICAgICAgfSksXG4gICAgfSxcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IEF1dGhlbnRpY2F0aW9uQ2hhbm5lbDogU29ja2V0RGlzcGF0Y2ggPSB7XG4gIGF1dGg6IChtc2c6IEF1dGhlbnRpY2F0aW9uUmVxdWVzdCwgc3RydXQ6IFN0cnV0U2VydmVyKSA9PiB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW48UmVzcG9uc2VFbnZlbG9wZTxBdXRoZW50aWNhdGlvblJlc3BvbnNlPj4oXG4gICAgICAoKSA9PiB7XG4gICAgICAgIGlmIChtc2cucmVxdWVzdCA9PT0gJ3N0YXJ0YXV0aCcpIHtcbiAgICAgICAgICByZXR1cm4gc3RhcnQobXNnLCBzdHJ1dCk7XG4gICAgICAgIH0gZWxzZSBpZiAobXNnLnJlcXVlc3QgPT09ICd0ZXN0a2V5Jykge1xuICAgICAgICAgIHJldHVybiB0ZXN0KG1zZywgc3RydXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBicm9hZGNhc3Q6IGZhbHNlLFxuICAgICAgICAgICAga2V5OiAnZXJyb3InLFxuICAgICAgICAgICAgbXNnOiB7XG4gICAgICAgICAgICAgIHJlc3BvbnNlOiAnaW52YWxpZFJlcXVlc3QnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICk7XG4gIH0sXG59O1xuIl19
