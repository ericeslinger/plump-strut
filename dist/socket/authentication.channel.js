"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function test(msg, server) {
    return server.services.tokenStore
        .tokenToUser(msg.key)
        .then(function (v) {
        if (!!v) {
            msg.client.user = v;
            msg.client.join('authenticated');
            console.log('authenticated user');
            return {
                response: 'testkey',
                you: v,
                auth: true,
                token: msg.key,
            };
        }
        else {
            return {
                response: 'testkey',
                auth: false,
            };
        }
    })
        .then(function (response) {
        if (response.auth === true && server.extensions['loginExtras']) {
            return server.extensions['loginExtras'](response.you).then(function (r) {
                return Object.assign(response, { included: r });
            });
        }
    })
        .then(function (response) {
        return {
            broadcast: false,
            key: msg.responseKey,
            msg: response,
        };
    });
}
function start(msg, server) {
    msg.client.join(msg.nonce);
    return {
        key: msg.nonce,
        broadcast: false,
        msg: {
            response: 'startauth',
            types: server.config.authTypes.map(function (v) {
                return {
                    name: v.name,
                    iconUrl: v.iconUrl,
                    url: server.config.apiProtocol + "://" + server.config
                        .apiHostname + server.config
                        .authRoot + "?method=" + v.name + "&nonce=" + msg.nonce,
                };
            }),
        },
    };
}
exports.AuthenticationChannel = {
    auth: function (msg, strut) {
        return Promise.resolve().then(function () {
            if (msg.request === 'startauth') {
                return start(msg, strut);
            }
            else if (msg.request === 'testkey') {
                return test(msg, strut);
            }
            else {
                return {
                    broadcast: false,
                    key: 'error',
                    msg: {
                        response: 'invalidRequest',
                    },
                };
            }
        });
    },
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zb2NrZXQvYXV0aGVudGljYXRpb24uY2hhbm5lbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQWlCQSxjQUNFLEdBQWlDLEVBQ2pDLE1BQW1CO0lBRW5CLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVU7U0FDOUIsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7U0FDcEIsSUFBSSxDQUFDLFVBQUEsQ0FBQztRQUNMLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ1IsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO1lBQ3BCLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBQ2pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FBQztZQUNsQyxNQUFNLENBQUM7Z0JBQ0wsUUFBUSxFQUFFLFNBQVM7Z0JBQ25CLEdBQUcsRUFBRSxDQUFDO2dCQUNOLElBQUksRUFBRSxJQUFJO2dCQUNWLEtBQUssRUFBRSxHQUFHLENBQUMsR0FBRzthQUNmLENBQUM7UUFDSixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixNQUFNLENBQUM7Z0JBQ0wsUUFBUSxFQUFFLFNBQVM7Z0JBQ25CLElBQUksRUFBRSxLQUFLO2FBQ1osQ0FBQztRQUNKLENBQUM7SUFDSCxDQUFDLENBQUM7U0FDRCxJQUFJLENBQUMsVUFBQyxRQUFzQjtRQUMzQixFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxLQUFLLElBQUksSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvRCxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsQ0FBQztnQkFDMUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDbEQsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDO0lBQ0gsQ0FBQyxDQUFDO1NBQ0QsSUFBSSxDQUFDLFVBQUMsUUFBc0I7UUFDM0IsTUFBTSxDQUFDO1lBQ0wsU0FBUyxFQUFFLEtBQUs7WUFDaEIsR0FBRyxFQUFFLEdBQUcsQ0FBQyxXQUFXO1lBQ3BCLEdBQUcsRUFBRSxRQUFRO1NBQ2QsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQUVELGVBQ0UsR0FBK0IsRUFDL0IsTUFBbUI7SUFFbkIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNCLE1BQU0sQ0FBQztRQUNMLEdBQUcsRUFBRSxHQUFHLENBQUMsS0FBSztRQUNkLFNBQVMsRUFBRSxLQUFLO1FBQ2hCLEdBQUcsRUFBRTtZQUNILFFBQVEsRUFBRSxXQUFXO1lBQ3JCLEtBQUssRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDO2dCQUNsQyxNQUFNLENBQUM7b0JBQ0wsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJO29CQUNaLE9BQU8sRUFBRSxDQUFDLENBQUMsT0FBTztvQkFDbEIsR0FBRyxFQUFLLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxXQUFNLE1BQU0sQ0FBQyxNQUFNO3lCQUNqRCxXQUFXLEdBQUcsTUFBTSxDQUFDLE1BQU07eUJBQzNCLFFBQVEsZ0JBQVcsQ0FBQyxDQUFDLElBQUksZUFBVSxHQUFHLENBQUMsS0FBTztpQkFDbEQsQ0FBQztZQUNKLENBQUMsQ0FBQztTQUNIO0tBQ0YsQ0FBQztBQUNKLENBQUM7QUFFWSxRQUFBLHFCQUFxQixHQUFtQjtJQUNuRCxJQUFJLEVBQUUsVUFBQyxHQUEwQixFQUFFLEtBQWtCO1FBQ25ELE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUUzQjtZQUNBLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQztnQkFDaEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDM0IsQ0FBQztZQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQzFCLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDTixNQUFNLENBQUM7b0JBQ0wsU0FBUyxFQUFFLEtBQUs7b0JBQ2hCLEdBQUcsRUFBRSxPQUFPO29CQUNaLEdBQUcsRUFBRTt3QkFDSCxRQUFRLEVBQUUsZ0JBQWdCO3FCQUMzQjtpQkFDRixDQUFDO1lBQ0osQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGLENBQUMiLCJmaWxlIjoic29ja2V0L2F1dGhlbnRpY2F0aW9uLmNoYW5uZWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBTb2NrZXRJTyBmcm9tICdzb2NrZXQuaW8nO1xuaW1wb3J0IHsgU3RydXRTZXJ2ZXIgfSBmcm9tICcuLi9kYXRhVHlwZXMnO1xuaW1wb3J0IHtcbiAgU2luZ2xldG9uUmVxdWVzdCxcbiAgQXV0aGVudGljYXRpb25SZXF1ZXN0LFxuICBUZXN0S2V5QXV0aGVudGljYXRpb25SZXF1ZXN0LFxuICBTdGFydEF1dGhlbnRpY2F0aW9uUmVxdWVzdCxcbiAgU3RhcnRSZXNwb25zZSxcbiAgVGVzdFJlc3BvbnNlLFxuICBBdXRoZW50aWNhdGlvblJlc3BvbnNlLFxuICBTb2NrZXREaXNwYXRjaCxcbiAgUmVzcG9uc2VFbnZlbG9wZSxcbiAgQXV0aGVudGljYXRlZFNvY2tldCxcbn0gZnJvbSAnLi9kYXRhVHlwZXMnO1xuXG5pbXBvcnQgeyBDaGFubmVsUmVxdWVzdCB9IGZyb20gJy4vZGF0YVR5cGVzJztcblxuZnVuY3Rpb24gdGVzdChcbiAgbXNnOiBUZXN0S2V5QXV0aGVudGljYXRpb25SZXF1ZXN0LFxuICBzZXJ2ZXI6IFN0cnV0U2VydmVyLFxuKTogUHJvbWlzZTxSZXNwb25zZUVudmVsb3BlPFRlc3RSZXNwb25zZT4+IHtcbiAgcmV0dXJuIHNlcnZlci5zZXJ2aWNlcy50b2tlblN0b3JlXG4gICAgLnRva2VuVG9Vc2VyKG1zZy5rZXkpXG4gICAgLnRoZW4odiA9PiB7XG4gICAgICBpZiAoISF2KSB7XG4gICAgICAgIG1zZy5jbGllbnQudXNlciA9IHY7XG4gICAgICAgIG1zZy5jbGllbnQuam9pbignYXV0aGVudGljYXRlZCcpO1xuICAgICAgICBjb25zb2xlLmxvZygnYXV0aGVudGljYXRlZCB1c2VyJyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcmVzcG9uc2U6ICd0ZXN0a2V5JyxcbiAgICAgICAgICB5b3U6IHYsXG4gICAgICAgICAgYXV0aDogdHJ1ZSxcbiAgICAgICAgICB0b2tlbjogbXNnLmtleSxcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcmVzcG9uc2U6ICd0ZXN0a2V5JyxcbiAgICAgICAgICBhdXRoOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9KVxuICAgIC50aGVuKChyZXNwb25zZTogVGVzdFJlc3BvbnNlKSA9PiB7XG4gICAgICBpZiAocmVzcG9uc2UuYXV0aCA9PT0gdHJ1ZSAmJiBzZXJ2ZXIuZXh0ZW5zaW9uc1snbG9naW5FeHRyYXMnXSkge1xuICAgICAgICByZXR1cm4gc2VydmVyLmV4dGVuc2lvbnNbJ2xvZ2luRXh0cmFzJ10ocmVzcG9uc2UueW91KS50aGVuKHIgPT4ge1xuICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHJlc3BvbnNlLCB7IGluY2x1ZGVkOiByIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KVxuICAgIC50aGVuKChyZXNwb25zZTogVGVzdFJlc3BvbnNlKSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBicm9hZGNhc3Q6IGZhbHNlLFxuICAgICAgICBrZXk6IG1zZy5yZXNwb25zZUtleSxcbiAgICAgICAgbXNnOiByZXNwb25zZSxcbiAgICAgIH07XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHN0YXJ0KFxuICBtc2c6IFN0YXJ0QXV0aGVudGljYXRpb25SZXF1ZXN0LFxuICBzZXJ2ZXI6IFN0cnV0U2VydmVyLFxuKTogUmVzcG9uc2VFbnZlbG9wZTxTdGFydFJlc3BvbnNlPiB7XG4gIG1zZy5jbGllbnQuam9pbihtc2cubm9uY2UpO1xuICByZXR1cm4ge1xuICAgIGtleTogbXNnLm5vbmNlLFxuICAgIGJyb2FkY2FzdDogZmFsc2UsXG4gICAgbXNnOiB7XG4gICAgICByZXNwb25zZTogJ3N0YXJ0YXV0aCcsXG4gICAgICB0eXBlczogc2VydmVyLmNvbmZpZy5hdXRoVHlwZXMubWFwKHYgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG5hbWU6IHYubmFtZSxcbiAgICAgICAgICBpY29uVXJsOiB2Lmljb25VcmwsXG4gICAgICAgICAgdXJsOiBgJHtzZXJ2ZXIuY29uZmlnLmFwaVByb3RvY29sfTovLyR7c2VydmVyLmNvbmZpZ1xuICAgICAgICAgICAgLmFwaUhvc3RuYW1lfSR7c2VydmVyLmNvbmZpZ1xuICAgICAgICAgICAgLmF1dGhSb290fT9tZXRob2Q9JHt2Lm5hbWV9Jm5vbmNlPSR7bXNnLm5vbmNlfWAsXG4gICAgICAgIH07XG4gICAgICB9KSxcbiAgICB9LFxuICB9O1xufVxuXG5leHBvcnQgY29uc3QgQXV0aGVudGljYXRpb25DaGFubmVsOiBTb2NrZXREaXNwYXRjaCA9IHtcbiAgYXV0aDogKG1zZzogQXV0aGVudGljYXRpb25SZXF1ZXN0LCBzdHJ1dDogU3RydXRTZXJ2ZXIpID0+IHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbjxcbiAgICAgIFJlc3BvbnNlRW52ZWxvcGU8QXV0aGVudGljYXRpb25SZXNwb25zZT5cbiAgICA+KCgpID0+IHtcbiAgICAgIGlmIChtc2cucmVxdWVzdCA9PT0gJ3N0YXJ0YXV0aCcpIHtcbiAgICAgICAgcmV0dXJuIHN0YXJ0KG1zZywgc3RydXQpO1xuICAgICAgfSBlbHNlIGlmIChtc2cucmVxdWVzdCA9PT0gJ3Rlc3RrZXknKSB7XG4gICAgICAgIHJldHVybiB0ZXN0KG1zZywgc3RydXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBicm9hZGNhc3Q6IGZhbHNlLFxuICAgICAgICAgIGtleTogJ2Vycm9yJyxcbiAgICAgICAgICBtc2c6IHtcbiAgICAgICAgICAgIHJlc3BvbnNlOiAnaW52YWxpZFJlcXVlc3QnLFxuICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG59O1xuIl19
