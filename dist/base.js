"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Boom = require("boom");
var Joi = require("joi");
var routes_1 = require("./routes");
var mergeOptions = require("merge-options");
var baseRoutes = routes_1.createRoutes();
function plugin(server, _, next) {
    var _this = this;
    server.route(this.constructor.routes
        .map(function (method) { return _this.route(method, baseRoutes[method]); })
        .reduce(function (acc, curr) { return acc.concat(curr); }, []));
    server.route(this.extraRoutes());
    next();
}
var BaseController = (function () {
    function BaseController(plump, model, options) {
        if (options === void 0) { options = {}; }
        this.plump = plump;
        this.model = model;
        this.options = Object.assign({}, { sideloads: [] }, options);
        this.plugin = plugin.bind(this);
        this.plugin.attributes = Object.assign({}, {
            version: '1.0.0',
            name: this.model.typeName,
        }, this.options.plugin);
    }
    BaseController.prototype.extraRoutes = function () {
        return [];
    };
    BaseController.prototype.read = function () {
        return function (request) { return Promise.resolve(request.pre.item.data); };
    };
    BaseController.prototype.update = function () {
        return function (request) {
            return request.pre.item.ref.set(request.payload).save();
        };
    };
    BaseController.prototype.delete = function () {
        return function (request) {
            return request.pre.item.ref.delete();
        };
    };
    BaseController.prototype.create = function () {
        var _this = this;
        return function (request) {
            return new _this.model(request.payload.attributes, _this.plump).save();
        };
    };
    BaseController.prototype.addChild = function (_a) {
        var field = _a.field;
        return function (request) {
            return request.pre.item.ref.add(field, request.payload).save();
        };
    };
    BaseController.prototype.listChildren = function (_a) {
        var field = _a.field;
        return function (request) { return request.pre.item.ref.get("relationships." + field); };
    };
    BaseController.prototype.removeChild = function (_a) {
        var field = _a.field;
        return function (request) {
            return request.pre.item.ref.remove(field, { id: request.params.childId }).save();
        };
    };
    BaseController.prototype.modifyChild = function (_a) {
        var field = _a.field;
        return function (request) {
            var update = {
                id: request.params.childId,
                meta: request.payload.meta,
            };
            return request.pre.item.ref.modifyRelationship(field, update).save();
        };
    };
    BaseController.prototype.query = function () {
        var _this = this;
        return function (request) {
            return _this.plump.query(request.query);
        };
    };
    BaseController.prototype.createHandler = function (method, options) {
        var handler = this[method](options);
        return function (request, reply) {
            return handler(request)
                .then(function (response) {
                reply(response).code(200);
            }).catch(function (err) {
                console.log(err);
                reply(Boom.badImplementation(err));
            });
        };
    };
    BaseController.prototype.createJoiValidator = function (field) {
        try {
            var schema_1 = this.model.schema;
            if (field) {
                if (field in schema_1.attributes) {
                    return _a = {}, _a[field] = Joi[schema_1.attributes[field].type](), _a;
                }
                else if (field in schema_1.relationships) {
                    var dataSchema_1 = {
                        id: Joi.number(),
                    };
                    if (schema_1.relationships[field].type.extras) {
                        var extras_1 = schema_1.relationships[field].type.extras;
                        Object.keys(extras_1).forEach(function (extra) {
                            dataSchema_1.meta = dataSchema_1.meta || {};
                            dataSchema_1.meta[extra] = Joi[extras_1[extra].type]();
                        });
                    }
                    return dataSchema_1;
                }
                else {
                    return {};
                }
            }
            else {
                var retVal_1 = {
                    typeName: Joi.string(),
                    id: Joi.number(),
                    attributes: {},
                    relationships: {},
                };
                Object.keys(schema_1.attributes).forEach(function (attr) {
                    retVal_1.attributes[attr] = Joi[schema_1.attributes[attr].type]();
                });
                Object.keys(schema_1.relationships).forEach(function (relName) {
                    var itemSchema = { id: Joi.number() };
                    if (schema_1.relationships[relName].type.extras) {
                        var extras = schema_1.relationships[relName].type.extras;
                        for (var extra in extras) {
                            var extraType = extras[extra].type;
                            itemSchema.meta = itemSchema.meta || {};
                            itemSchema.meta[extra] = Joi[extraType]();
                        }
                    }
                    retVal_1.relationships[relName] = Joi.array().items(Joi.object({
                        op: Joi.string().valid('add', 'modify', 'remove'),
                        data: itemSchema,
                    }));
                });
                return retVal_1;
            }
        }
        catch (err) {
            console.log(err);
            return {};
        }
        var _a;
    };
    BaseController.prototype.loadHandler = function () {
        var _this = this;
        return {
            method: function (request, reply) {
                if (request.params && request.params.itemId) {
                    var item_1 = _this.plump.find({ typeName: _this.model.typeName, id: request.params.itemId });
                    return item_1.get()
                        .then(function (thing) {
                        if (thing) {
                            reply({
                                ref: item_1,
                                data: thing,
                            });
                        }
                        else {
                            reply(Boom.notFound());
                        }
                    }).catch(function (err) {
                        console.log(err);
                        reply(Boom.badImplementation(err));
                    });
                }
                else {
                    return reply(Boom.notFound());
                }
            },
            assign: 'item',
        };
    };
    BaseController.prototype.route = function (method, opts) {
        if (opts.plural) {
            return this.routeRelationships(method, opts);
        }
        else {
            return this.routeAttributes(method, opts);
        }
    };
    BaseController.prototype.approveHandler = function (method, opts) {
        return {
            method: function (request, reply) { return reply(true); },
            assign: 'approve',
        };
    };
    BaseController.prototype.routeRelationships = function (method, opts) {
        var _this = this;
        return Object.keys(this.model.schema.relationships).map(function (field) {
            var genericOpts = mergeOptions({}, opts, {
                validate: {},
                generatorOptions: { field: field },
            });
            genericOpts.hapi.path = genericOpts.hapi.path.replace('{field}', field);
            if (['POST', 'PUT', 'PATCH'].indexOf(genericOpts.hapi.method) >= 0) {
                genericOpts.validate.payload = _this.createJoiValidator(field);
            }
            genericOpts.plural = false;
            return _this.routeAttributes(method, genericOpts);
        });
    };
    BaseController.prototype.routeAttributes = function (method, opts) {
        var routeConfig = mergeOptions({}, {
            handler: opts.handler || this.createHandler(method, opts.generatorOptions),
            config: {
                pre: [this.approveHandler(method, opts.generatorOptions)],
                validate: {},
            },
        }, opts.hapi);
        if (opts.hapi.path.indexOf('itemId') >= 0) {
            routeConfig.config.pre.unshift(this.loadHandler());
        }
        if (opts.pre !== undefined) {
            opts.pre.forEach(function (p) { return routeConfig.config.pre.push(p); });
        }
        if (opts.validate && opts.validate.query) {
            routeConfig.config.validate.query = opts.validate.query;
        }
        if (opts.validate && opts.validate.params) {
            routeConfig.config.validate.params = opts.validate.params;
        }
        if (opts.validate && opts.validate.payload === true) {
            routeConfig.config.validate.payload = this.createJoiValidator();
        }
        else if (opts.validate && opts.validate.payload) {
            routeConfig.config.validate.payload = opts.validate.payload;
        }
        return routeConfig;
    };
    return BaseController;
}());
exports.BaseController = BaseController;
BaseController.routes = [
    'read',
    'query',
    'listChildren',
    'addChild',
    'removeChild',
    'modifyChild',
    'create',
    'update',
    'delete',
];

//# sourceMappingURL=data:application/json;charset=utf8;base64,
