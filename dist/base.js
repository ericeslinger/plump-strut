"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Boom = require("boom");
var Joi = require("joi");
var routes_1 = require("./routes");
var mergeOptions = require("merge-options");
var baseRoutes = routes_1.createRoutes();
function plugin(server, _, next) {
    var _this = this;
    server.route(this.constructor.routes
        .map(function (method) { return _this.route(method, baseRoutes[method]); })
        .reduce(function (acc, curr) { return acc.concat(curr); }, []));
    server.route(this.extraRoutes());
    next();
}
var BaseController = (function () {
    function BaseController(plump, model, options) {
        if (options === void 0) { options = {}; }
        this.plump = plump;
        this.model = model;
        this.options = Object.assign({}, { sideloads: [] }, options);
        this.plugin = plugin.bind(this);
        this.plugin.attributes = Object.assign({}, {
            version: '1.0.0',
            name: this.model.typeName,
        }, this.options.plugin);
    }
    BaseController.prototype.extraRoutes = function () {
        return [];
    };
    BaseController.prototype.read = function () {
        var _this = this;
        return function (request) {
            return Promise.resolve({
                typeName: _this.model.typeName,
                id: request.pre.item.ref.id,
                data: request.pre.item.data,
                included: []
            });
        };
    };
    BaseController.prototype.update = function () {
        return function (request) {
            return request.pre.item.ref.set(request.payload).save();
        };
    };
    BaseController.prototype.delete = function () {
        return function (request) {
            return request.pre.item.ref.delete();
        };
    };
    BaseController.prototype.create = function () {
        var _this = this;
        return function (request) {
            return new _this.model(request.payload.attributes, _this.plump).save();
        };
    };
    BaseController.prototype.addChild = function (_a) {
        var field = _a.field;
        return function (request) {
            return request.pre.item.ref.add(field, request.payload).save();
        };
    };
    BaseController.prototype.listChildren = function (_a) {
        var field = _a.field;
        return function (request) {
            return request.pre.item.ref.get("relationships." + field)
                .then(function (v) {
                return {
                    data: v,
                    id: v.id,
                    typeName: v.typeName,
                    included: [],
                };
            });
        };
    };
    BaseController.prototype.removeChild = function (_a) {
        var field = _a.field;
        return function (request) {
            return request.pre.item.ref.remove(field, { id: request.params.childId }).save();
        };
    };
    BaseController.prototype.modifyChild = function (_a) {
        var field = _a.field;
        return function (request) {
            var update = {
                id: request.params.childId,
                meta: request.payload.meta,
            };
            return request.pre.item.ref.modifyRelationship(field, update).save();
        };
    };
    BaseController.prototype.query = function () {
        var _this = this;
        return function (request) {
            return _this.plump.query(request.query);
        };
    };
    BaseController.prototype.createHandler = function (method, options) {
        var handler = this[method](options);
        return function (request, reply) {
            return handler(request)
                .then(function (response) {
                reply(response).code(200);
            }).catch(function (err) {
                console.log(err);
                reply(Boom.badImplementation(err));
            });
        };
    };
    BaseController.prototype.createJoiValidator = function (field) {
        try {
            var schema_1 = this.model.schema;
            if (field) {
                if (field in schema_1.attributes) {
                    return _a = {}, _a[field] = Joi[schema_1.attributes[field].type](), _a;
                }
                else if (field in schema_1.relationships) {
                    var dataSchema_1 = {
                        id: Joi.number(),
                    };
                    if (schema_1.relationships[field].type.extras) {
                        var extras_1 = schema_1.relationships[field].type.extras;
                        Object.keys(extras_1).forEach(function (extra) {
                            dataSchema_1.meta = dataSchema_1.meta || {};
                            dataSchema_1.meta[extra] = Joi[extras_1[extra].type]();
                        });
                    }
                    return dataSchema_1;
                }
                else {
                    return {};
                }
            }
            else {
                var retVal_1 = {
                    type: Joi.string(),
                    id: Joi.number(),
                    attributes: {},
                    relationships: {},
                };
                Object.keys(schema_1.attributes).forEach(function (attr) {
                    retVal_1.attributes[attr] = Joi[schema_1.attributes[attr].type]();
                });
                Object.keys(schema_1.relationships).forEach(function (relName) {
                    var itemSchema = { id: Joi.number() };
                    if (schema_1.relationships[relName].type.extras) {
                        var extras = schema_1.relationships[relName].type.extras;
                        for (var extra in extras) {
                            var extraType = extras[extra].type;
                            itemSchema.meta = itemSchema.meta || {};
                            itemSchema.meta[extra] = Joi[extraType]();
                        }
                    }
                    retVal_1.relationships[relName] = Joi.array().items(Joi.object({
                        op: Joi.string().valid('add', 'modify', 'remove'),
                        data: itemSchema,
                    }));
                });
                return retVal_1;
            }
        }
        catch (err) {
            console.log(err);
            return {};
        }
        var _a;
    };
    BaseController.prototype.loadHandler = function () {
        var _this = this;
        return {
            method: function (request, reply) {
                if (request.params && request.params.itemId) {
                    var item_1 = _this.plump.find(_this.model.typeName, request.params.itemId);
                    return item_1.get()
                        .then(function (thing) {
                        if (thing) {
                            reply({
                                ref: item_1,
                                data: thing,
                            });
                        }
                        else {
                            reply(Boom.notFound());
                        }
                    }).catch(function (err) {
                        console.log(err);
                        reply(Boom.badImplementation(err));
                    });
                }
                else {
                    return reply(Boom.notFound());
                }
            },
            assign: 'item',
        };
    };
    BaseController.prototype.route = function (method, opts) {
        if (opts.plural) {
            return this.routeRelationships(method, opts);
        }
        else {
            return this.routeAttributes(method, opts);
        }
    };
    BaseController.prototype.approveHandler = function (method, opts) {
        return {
            method: function (request, reply) { return reply(true); },
            assign: 'approve',
        };
    };
    BaseController.prototype.routeRelationships = function (method, opts) {
        var _this = this;
        return Object.keys(this.model.schema.relationships).map(function (field) {
            var genericOpts = mergeOptions({}, opts, {
                validate: {},
                generatorOptions: { field: field },
            });
            genericOpts.hapi.path = genericOpts.hapi.path.replace('{field}', field);
            if (['POST', 'PUT', 'PATCH'].indexOf(genericOpts.hapi.method) >= 0) {
                genericOpts.validate.payload = _this.createJoiValidator(field);
            }
            genericOpts.plural = false;
            return _this.routeAttributes(method, genericOpts);
        });
    };
    BaseController.prototype.routeAttributes = function (method, opts) {
        var routeConfig = mergeOptions({}, {
            handler: opts.handler || this.createHandler(method, opts.generatorOptions),
            config: {
                pre: [this.approveHandler(method, opts.generatorOptions)],
                validate: {},
            },
        }, opts.hapi);
        if (opts.hapi.path.indexOf('itemId') >= 0) {
            routeConfig.config.pre.unshift(this.loadHandler());
        }
        if (opts.pre !== undefined) {
            opts.pre.forEach(function (p) { return routeConfig.config.pre.push(p); });
        }
        if (opts.validate && opts.validate.query) {
            routeConfig.config.validate.query = opts.validate.query;
        }
        if (opts.validate && opts.validate.params) {
            routeConfig.config.validate.params = opts.validate.params;
        }
        if (opts.validate && opts.validate.payload === true) {
            routeConfig.config.validate.payload = this.createJoiValidator();
        }
        else if (opts.validate && opts.validate.payload) {
            routeConfig.config.validate.payload = opts.validate.payload;
        }
        return routeConfig;
    };
    return BaseController;
}());
exports.BaseController = BaseController;
BaseController.routes = [
    'read',
    'query',
    'listChildren',
    'addChild',
    'removeChild',
    'modifyChild',
    'create',
    'update',
    'delete',
];

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFJLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDcEQsV0FBVyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQ2xFLENBQUM7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDbEQsV0FBVyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO1FBQzlELENBQUM7UUFDRCxNQUFNLENBQUMsV0FBVyxDQUFDO0lBQ3JCLENBQUM7SUFDSCxxQkFBQztBQUFELENBelJBLEFBeVJDLElBQUE7QUF6Ulksd0NBQWM7QUEyUjNCLGNBQWMsQ0FBQyxNQUFNLEdBQUc7SUFDdEIsTUFBTTtJQUNOLE9BQU87SUFDUCxjQUFjO0lBQ2QsVUFBVTtJQUNWLGFBQWE7SUFDYixhQUFhO0lBQ2IsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0NBQ1QsQ0FBQyIsImZpbGUiOiJiYXNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQm9vbSBmcm9tICdib29tJztcbmltcG9ydCAqIGFzIEpvaSBmcm9tICdqb2knO1xuaW1wb3J0IHsgY3JlYXRlUm91dGVzIH0gZnJvbSAnLi9yb3V0ZXMnO1xuaW1wb3J0ICogYXMgbWVyZ2VPcHRpb25zIGZyb20gJ21lcmdlLW9wdGlvbnMnO1xuaW1wb3J0IHsgTW9kZWwsIFBsdW1wLCBNb2RlbERhdGEsIFBhY2thZ2VkTW9kZWxEYXRhLCBNb2RlbFJlZmVyZW5jZSB9IGZyb20gJ3BsdW1wJzsgLy8gdHNsaW50OmRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyaWFibGVcbi8vIG5lZWQgdG8gaW1wb3J0IE1vZGVsUmVmZXJlbmNlIGJlY2F1c2Ugc29tZSBvZiB0aGUgbWV0aG9kcyByZXR1cm4gdGhlbS5cbmltcG9ydCAqIGFzIEhhcGkgZnJvbSAnaGFwaSc7XG5cbmNvbnN0IGJhc2VSb3V0ZXMgPSBjcmVhdGVSb3V0ZXMoKTtcblxuZnVuY3Rpb24gcGx1Z2luKHNlcnZlciwgXywgbmV4dCkge1xuICBzZXJ2ZXIucm91dGUoXG4gICAgdGhpcy5jb25zdHJ1Y3Rvci5yb3V0ZXNcbiAgICAubWFwKChtZXRob2QpID0+IHRoaXMucm91dGUobWV0aG9kLCBiYXNlUm91dGVzW21ldGhvZF0pKVxuICAgIC5yZWR1Y2UoKGFjYywgY3VycikgPT4gYWNjLmNvbmNhdChjdXJyKSwgW10pIC8vIHJvdXRlUmVsYXRpb25zaGlwIHJldHVybnMgYW4gYXJyYXlcbiAgKTtcbiAgc2VydmVyLnJvdXRlKHRoaXMuZXh0cmFSb3V0ZXMoKSk7XG4gIG5leHQoKTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSb3V0ZWRJdGVtIGV4dGVuZHMgSGFwaS5SZXF1ZXN0IHtcbiAgcHJlOiB7XG4gICAgaXRlbToge1xuICAgICAgcmVmOiBNb2RlbCxcbiAgICAgIGRhdGE6IE1vZGVsRGF0YSxcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0cnV0SGFuZGxlcjxUPiB7XG4gIChyZXF1ZXN0OiBIYXBpLlJlcXVlc3QpOiBQcm9taXNlPFQ+O1xufVxuXG5leHBvcnQgY2xhc3MgQmFzZUNvbnRyb2xsZXIge1xuICBwdWJsaWMgcGx1bXA6IFBsdW1wO1xuICBwdWJsaWMgbW9kZWw6IHR5cGVvZiBNb2RlbDtcbiAgcHVibGljIG9wdGlvbnM7XG4gIHB1YmxpYyBwbHVnaW46IHtcbiAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICB2ZXJzaW9uOiBzdHJpbmcsXG4gICAgICBuYW1lOiBzdHJpbmdcbiAgICB9XG4gIH07XG4gIHN0YXRpYyByb3V0ZXM6IHN0cmluZ1tdO1xuICBjb25zdHJ1Y3RvcihwbHVtcDogUGx1bXAsIG1vZGVsOiB0eXBlb2YgTW9kZWwsIG9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMucGx1bXAgPSBwbHVtcDtcbiAgICB0aGlzLm1vZGVsID0gbW9kZWw7XG4gICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgeyBzaWRlbG9hZHM6IFtdIH0sIG9wdGlvbnMpO1xuICAgIHRoaXMucGx1Z2luID0gcGx1Z2luLmJpbmQodGhpcyk7XG4gICAgdGhpcy5wbHVnaW4uYXR0cmlidXRlcyA9IE9iamVjdC5hc3NpZ24oe30sIHtcbiAgICAgIHZlcnNpb246ICcxLjAuMCcsXG4gICAgICBuYW1lOiB0aGlzLm1vZGVsLnR5cGVOYW1lLFxuICAgIH0sIHRoaXMub3B0aW9ucy5wbHVnaW4pO1xuICB9XG5cbiAgZXh0cmFSb3V0ZXMoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcmVhZCgpOiBTdHJ1dEhhbmRsZXI8UGFja2FnZWRNb2RlbERhdGE+IHtcbiAgICByZXR1cm4gKHJlcXVlc3Q6IFJvdXRlZEl0ZW0pID0+IHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICB0eXBlTmFtZTogdGhpcy5tb2RlbC50eXBlTmFtZSxcbiAgICAgICAgaWQ6IHJlcXVlc3QucHJlLml0ZW0ucmVmLmlkLFxuICAgICAgICBkYXRhOiByZXF1ZXN0LnByZS5pdGVtLmRhdGEsXG4gICAgICAgIGluY2x1ZGVkOiBbXVxuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZSgpOiBTdHJ1dEhhbmRsZXI8TW9kZWxEYXRhPiB7XG4gICAgcmV0dXJuIChyZXF1ZXN0OiBSb3V0ZWRJdGVtKSA9PiB7XG4gICAgICByZXR1cm4gcmVxdWVzdC5wcmUuaXRlbS5yZWYuc2V0KHJlcXVlc3QucGF5bG9hZCkuc2F2ZSgpO1xuICAgIH07XG4gIH1cblxuICBkZWxldGUoKTogU3RydXRIYW5kbGVyPHZvaWQ+IHtcbiAgICByZXR1cm4gKHJlcXVlc3Q6IFJvdXRlZEl0ZW0pID0+IHtcbiAgICAgIHJldHVybiByZXF1ZXN0LnByZS5pdGVtLnJlZi5kZWxldGUoKTtcbiAgICB9O1xuICB9XG5cbiAgY3JlYXRlKCk6IFN0cnV0SGFuZGxlcjxNb2RlbERhdGE+IHtcbiAgICByZXR1cm4gKHJlcXVlc3QpID0+IHtcbiAgICAgIHJldHVybiBuZXcgdGhpcy5tb2RlbChyZXF1ZXN0LnBheWxvYWQuYXR0cmlidXRlcywgdGhpcy5wbHVtcCkuc2F2ZSgpO1xuICAgIH07XG4gIH1cblxuICBhZGRDaGlsZCh7IGZpZWxkIH0pIHtcbiAgICByZXR1cm4gKHJlcXVlc3Q6IFJvdXRlZEl0ZW0pID0+IHtcbiAgICAgIHJldHVybiByZXF1ZXN0LnByZS5pdGVtLnJlZi5hZGQoZmllbGQsIHJlcXVlc3QucGF5bG9hZCkuc2F2ZSgpO1xuICAgIH07XG4gIH1cblxuICBsaXN0Q2hpbGRyZW4oeyBmaWVsZCB9KTogU3RydXRIYW5kbGVyPFBhY2thZ2VkTW9kZWxEYXRhPiB7XG4gICAgcmV0dXJuIChyZXF1ZXN0OiBSb3V0ZWRJdGVtKSA9PiB7XG4gICAgICByZXR1cm4gcmVxdWVzdC5wcmUuaXRlbS5yZWYuZ2V0KGByZWxhdGlvbnNoaXBzLiR7ZmllbGR9YClcbiAgICAgIC50aGVuKCh2KSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGF0YTogdixcbiAgICAgICAgICBpZDogdi5pZCxcbiAgICAgICAgICB0eXBlTmFtZTogdi50eXBlTmFtZSxcbiAgICAgICAgICBpbmNsdWRlZDogW10sXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgcmVtb3ZlQ2hpbGQoeyBmaWVsZCB9KSB7XG4gICAgcmV0dXJuIChyZXF1ZXN0OiBSb3V0ZWRJdGVtKSA9PiB7XG4gICAgICByZXR1cm4gcmVxdWVzdC5wcmUuaXRlbS5yZWYucmVtb3ZlKGZpZWxkLCB7IGlkOiByZXF1ZXN0LnBhcmFtcy5jaGlsZElkIH0gKS5zYXZlKCk7XG4gICAgfTtcbiAgfVxuXG4gIG1vZGlmeUNoaWxkKHsgZmllbGQgfSkge1xuICAgIHJldHVybiAocmVxdWVzdDogUm91dGVkSXRlbSkgPT4ge1xuICAgICAgY29uc3QgdXBkYXRlID0ge1xuICAgICAgICBpZDogcmVxdWVzdC5wYXJhbXMuY2hpbGRJZCxcbiAgICAgICAgbWV0YTogcmVxdWVzdC5wYXlsb2FkLm1ldGEsXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHJlcXVlc3QucHJlLml0ZW0ucmVmLm1vZGlmeVJlbGF0aW9uc2hpcChmaWVsZCwgdXBkYXRlKS5zYXZlKCk7XG4gICAgfTtcbiAgfVxuXG4gIHF1ZXJ5KCkge1xuICAgIHJldHVybiAocmVxdWVzdCkgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMucGx1bXAucXVlcnkocmVxdWVzdC5xdWVyeSk7XG4gICAgfTtcbiAgfVxuXG4gIGNyZWF0ZUhhbmRsZXIobWV0aG9kLCBvcHRpb25zKTogSGFwaS5JU2Vzc2lvbkhhbmRsZXIge1xuICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzW21ldGhvZF0ob3B0aW9ucyk7XG4gICAgcmV0dXJuIChyZXF1ZXN0OiBIYXBpLlJlcXVlc3QsIHJlcGx5OiBIYXBpLklSZXBseSkgPT4ge1xuICAgICAgcmV0dXJuIGhhbmRsZXIocmVxdWVzdClcbiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICByZXBseShyZXNwb25zZSkuY29kZSgyMDApO1xuICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICByZXBseShCb29tLmJhZEltcGxlbWVudGF0aW9uKGVycikpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIGNyZWF0ZUpvaVZhbGlkYXRvcihmaWVsZD86IHN0cmluZykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBzY2hlbWEgPSB0aGlzLm1vZGVsLnNjaGVtYTtcbiAgICAgIGlmIChmaWVsZCkge1xuICAgICAgICBpZiAoZmllbGQgaW4gc2NoZW1hLmF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICByZXR1cm4geyBbZmllbGRdOiBKb2lbc2NoZW1hLmF0dHJpYnV0ZXNbZmllbGRdLnR5cGVdKCkgfTtcbiAgICAgICAgfSBlbHNlIGlmIChmaWVsZCBpbiBzY2hlbWEucmVsYXRpb25zaGlwcykge1xuICAgICAgICAgIGNvbnN0IGRhdGFTY2hlbWE6IGFueSA9IHtcbiAgICAgICAgICAgIGlkOiBKb2kubnVtYmVyKCksXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGlmIChzY2hlbWEucmVsYXRpb25zaGlwc1tmaWVsZF0udHlwZS5leHRyYXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGV4dHJhcyA9IHNjaGVtYS5yZWxhdGlvbnNoaXBzW2ZpZWxkXS50eXBlLmV4dHJhcztcblxuICAgICAgICAgICAgT2JqZWN0LmtleXMoZXh0cmFzKS5mb3JFYWNoKGV4dHJhID0+IHtcbiAgICAgICAgICAgICAgZGF0YVNjaGVtYS5tZXRhID0gZGF0YVNjaGVtYS5tZXRhIHx8IHt9O1xuICAgICAgICAgICAgICBkYXRhU2NoZW1hLm1ldGFbZXh0cmFdID0gSm9pW2V4dHJhc1tleHRyYV0udHlwZV0oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZGF0YVNjaGVtYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHJldFZhbDogYW55ID0ge1xuICAgICAgICAgIHR5cGU6IEpvaS5zdHJpbmcoKSxcbiAgICAgICAgICBpZDogSm9pLm51bWJlcigpLFxuICAgICAgICAgIGF0dHJpYnV0ZXM6IHt9LFxuICAgICAgICAgIHJlbGF0aW9uc2hpcHM6IHt9LFxuICAgICAgICB9O1xuXG4gICAgICAgIE9iamVjdC5rZXlzKHNjaGVtYS5hdHRyaWJ1dGVzKS5mb3JFYWNoKGF0dHIgPT4ge1xuICAgICAgICAgIHJldFZhbC5hdHRyaWJ1dGVzW2F0dHJdID0gSm9pW3NjaGVtYS5hdHRyaWJ1dGVzW2F0dHJdLnR5cGVdKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIE9iamVjdC5rZXlzKHNjaGVtYS5yZWxhdGlvbnNoaXBzKS5mb3JFYWNoKHJlbE5hbWUgPT4ge1xuICAgICAgICAgIGNvbnN0IGl0ZW1TY2hlbWE6IGFueSA9IHsgaWQ6IEpvaS5udW1iZXIoKSB9O1xuXG4gICAgICAgICAgaWYgKHNjaGVtYS5yZWxhdGlvbnNoaXBzW3JlbE5hbWVdLnR5cGUuZXh0cmFzKSB7XG4gICAgICAgICAgICBjb25zdCBleHRyYXMgPSBzY2hlbWEucmVsYXRpb25zaGlwc1tyZWxOYW1lXS50eXBlLmV4dHJhcztcblxuICAgICAgICAgICAgZm9yIChjb25zdCBleHRyYSBpbiBleHRyYXMpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBndWFyZC1mb3ItaW5cbiAgICAgICAgICAgICAgY29uc3QgZXh0cmFUeXBlID0gZXh0cmFzW2V4dHJhXS50eXBlO1xuICAgICAgICAgICAgICBpdGVtU2NoZW1hLm1ldGEgPSBpdGVtU2NoZW1hLm1ldGEgfHwge307XG4gICAgICAgICAgICAgIGl0ZW1TY2hlbWEubWV0YVtleHRyYV0gPSBKb2lbZXh0cmFUeXBlXSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXRWYWwucmVsYXRpb25zaGlwc1tyZWxOYW1lXSA9IEpvaS5hcnJheSgpLml0ZW1zKEpvaS5vYmplY3Qoe1xuICAgICAgICAgICAgb3A6IEpvaS5zdHJpbmcoKS52YWxpZCgnYWRkJywgJ21vZGlmeScsICdyZW1vdmUnKSxcbiAgICAgICAgICAgIGRhdGE6IGl0ZW1TY2hlbWEsXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJldFZhbDtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICB9XG5cbiAgbG9hZEhhbmRsZXIoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1ldGhvZDogKHJlcXVlc3QsIHJlcGx5KSA9PiB7XG4gICAgICAgIGlmIChyZXF1ZXN0LnBhcmFtcyAmJiByZXF1ZXN0LnBhcmFtcy5pdGVtSWQpIHtcbiAgICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5wbHVtcC5maW5kKHRoaXMubW9kZWwudHlwZU5hbWUsIHJlcXVlc3QucGFyYW1zLml0ZW1JZCk7XG4gICAgICAgICAgcmV0dXJuIGl0ZW0uZ2V0KClcbiAgICAgICAgICAudGhlbigodGhpbmcpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGluZykge1xuICAgICAgICAgICAgICByZXBseSh7XG4gICAgICAgICAgICAgICAgcmVmOiBpdGVtLFxuICAgICAgICAgICAgICAgIGRhdGE6IHRoaW5nLFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlcGx5KEJvb20ubm90Rm91bmQoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgIHJlcGx5KEJvb20uYmFkSW1wbGVtZW50YXRpb24oZXJyKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHJlcGx5KEJvb20ubm90Rm91bmQoKSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBhc3NpZ246ICdpdGVtJyxcbiAgICB9O1xuICB9XG5cbiAgcm91dGUobWV0aG9kLCBvcHRzKSB7XG4gICAgaWYgKG9wdHMucGx1cmFsKSB7XG4gICAgICByZXR1cm4gdGhpcy5yb3V0ZVJlbGF0aW9uc2hpcHMobWV0aG9kLCBvcHRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMucm91dGVBdHRyaWJ1dGVzKG1ldGhvZCwgb3B0cyk7XG4gICAgfVxuICB9XG5cblxuICAvLyBvdmVycmlkZSBhcHByb3ZlSGFuZGxlciB3aXRoIHdoYXRldmVyIHBlci1yb3V0ZVxuICAvLyBsb2dpYyB5b3Ugd2FudCAtIHJlcGx5IHdpdGggQm9vbS5ub3RBdXRob3JpemVkKClcbiAgLy8gb3IgYW55IG90aGVyIHZhbHVlIG9uIG5vbi1hcHByb3ZlZCBzdGF0dXNcbiAgYXBwcm92ZUhhbmRsZXIobWV0aG9kLCBvcHRzKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICByZXR1cm4ge1xuICAgICAgbWV0aG9kOiAocmVxdWVzdCwgcmVwbHkpID0+IHJlcGx5KHRydWUpLFxuICAgICAgYXNzaWduOiAnYXBwcm92ZScsXG4gICAgfTtcbiAgfVxuXG4gIHJvdXRlUmVsYXRpb25zaGlwcyhtZXRob2QsIG9wdHMpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5tb2RlbC5zY2hlbWEucmVsYXRpb25zaGlwcykubWFwKGZpZWxkID0+IHtcbiAgICAgIGNvbnN0IGdlbmVyaWNPcHRzID0gbWVyZ2VPcHRpb25zKFxuICAgICAgICB7fSxcbiAgICAgICAgb3B0cyxcbiAgICAgICAge1xuICAgICAgICAgIHZhbGlkYXRlOiB7fSxcbiAgICAgICAgICBnZW5lcmF0b3JPcHRpb25zOiB7IGZpZWxkIH0sXG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICBnZW5lcmljT3B0cy5oYXBpLnBhdGggPSBnZW5lcmljT3B0cy5oYXBpLnBhdGgucmVwbGFjZSgne2ZpZWxkfScsIGZpZWxkKTtcbiAgICAgIGlmIChbJ1BPU1QnLCAnUFVUJywgJ1BBVENIJ10uaW5kZXhPZihnZW5lcmljT3B0cy5oYXBpLm1ldGhvZCkgPj0gMCkge1xuICAgICAgICBnZW5lcmljT3B0cy52YWxpZGF0ZS5wYXlsb2FkID0gdGhpcy5jcmVhdGVKb2lWYWxpZGF0b3IoZmllbGQpO1xuICAgICAgfVxuICAgICAgZ2VuZXJpY09wdHMucGx1cmFsID0gZmFsc2U7XG4gICAgICByZXR1cm4gdGhpcy5yb3V0ZUF0dHJpYnV0ZXMobWV0aG9kLCBnZW5lcmljT3B0cyk7XG4gICAgfSk7XG4gIH1cblxuICByb3V0ZUF0dHJpYnV0ZXMobWV0aG9kLCBvcHRzKSB7XG4gICAgLypcbiAgICBvcHRzOiB7XG4gICAgICBwcmU6IFtBTlkgUFJFSEFORExFUnNdXG4gICAgICBoYW5kbGVyOiBoYW5kbGVyIG92ZXJyaWRlXG4gICAgICB2YWxpZGF0ZToge0pvaSBieSB0eXBlIChwYXJhbSwgcXVlcnksIHBheWxvYWQpfSxcbiAgICAgIGF1dGg6IGFueXRoaW5nIG90aGVyIHRoYW4gdG9rZW4sXG4gICAgICBoYXBpOiB7QUxMIE9USEVSIEhBUEkgT1BUSU9OUywgTVVTVCBCRSBKU09OIFNUUklOR0lGWUFCTEV9LFxuICAgIH0sXG4gICAgKi9cblxuICAgIGNvbnN0IHJvdXRlQ29uZmlnID0gbWVyZ2VPcHRpb25zKFxuICAgICAge30sXG4gICAgICB7XG4gICAgICAgIGhhbmRsZXI6IG9wdHMuaGFuZGxlciB8fCB0aGlzLmNyZWF0ZUhhbmRsZXIobWV0aG9kLCBvcHRzLmdlbmVyYXRvck9wdGlvbnMpLFxuICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICBwcmU6IFt0aGlzLmFwcHJvdmVIYW5kbGVyKG1ldGhvZCwgb3B0cy5nZW5lcmF0b3JPcHRpb25zKV0sXG4gICAgICAgICAgdmFsaWRhdGU6IHt9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIG9wdHMuaGFwaVxuICAgICk7XG5cbiAgICBpZiAob3B0cy5oYXBpLnBhdGguaW5kZXhPZignaXRlbUlkJykgPj0gMCkge1xuICAgICAgcm91dGVDb25maWcuY29uZmlnLnByZS51bnNoaWZ0KHRoaXMubG9hZEhhbmRsZXIoKSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdHMucHJlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG9wdHMucHJlLmZvckVhY2goKHApID0+IHJvdXRlQ29uZmlnLmNvbmZpZy5wcmUucHVzaChwKSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdHMudmFsaWRhdGUgJiYgb3B0cy52YWxpZGF0ZS5xdWVyeSkge1xuICAgICAgcm91dGVDb25maWcuY29uZmlnLnZhbGlkYXRlLnF1ZXJ5ID0gb3B0cy52YWxpZGF0ZS5xdWVyeTtcbiAgICB9XG5cbiAgICBpZiAob3B0cy52YWxpZGF0ZSAmJiBvcHRzLnZhbGlkYXRlLnBhcmFtcykge1xuICAgICAgcm91dGVDb25maWcuY29uZmlnLnZhbGlkYXRlLnBhcmFtcyA9IG9wdHMudmFsaWRhdGUucGFyYW1zO1xuICAgIH1cblxuICAgIGlmIChvcHRzLnZhbGlkYXRlICYmIG9wdHMudmFsaWRhdGUucGF5bG9hZCA9PT0gdHJ1ZSkge1xuICAgICAgcm91dGVDb25maWcuY29uZmlnLnZhbGlkYXRlLnBheWxvYWQgPSB0aGlzLmNyZWF0ZUpvaVZhbGlkYXRvcigpO1xuICAgIH0gZWxzZSBpZiAob3B0cy52YWxpZGF0ZSAmJiBvcHRzLnZhbGlkYXRlLnBheWxvYWQpIHtcbiAgICAgIHJvdXRlQ29uZmlnLmNvbmZpZy52YWxpZGF0ZS5wYXlsb2FkID0gb3B0cy52YWxpZGF0ZS5wYXlsb2FkO1xuICAgIH1cbiAgICByZXR1cm4gcm91dGVDb25maWc7XG4gIH1cbn1cblxuQmFzZUNvbnRyb2xsZXIucm91dGVzID0gW1xuICAncmVhZCcsXG4gICdxdWVyeScsXG4gICdsaXN0Q2hpbGRyZW4nLFxuICAnYWRkQ2hpbGQnLFxuICAncmVtb3ZlQ2hpbGQnLFxuICAnbW9kaWZ5Q2hpbGQnLFxuICAnY3JlYXRlJyxcbiAgJ3VwZGF0ZScsXG4gICdkZWxldGUnLFxuXTtcbiJdfQ==
