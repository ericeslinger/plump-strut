"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mergeOptions = require("merge-options");
var Boom = require("boom");
function generateAuthRequest(options, services) {
    var getActor = services.oracle.authorizers[options.model.type]
        .mapActor
        ? services.oracle.authorizers[options.model.type].mapActor
        : function (v) { return v; };
    return function (req) {
        if (options.kind === 'attributes') {
            switch (options.action) {
                case 'create':
                    return {
                        data: req.payload,
                        target: { type: options.model.type },
                        kind: options.kind,
                        action: options.action,
                        actor: getActor(req.auth.credentials.user),
                    };
                case 'read':
                    return {
                        target: { type: options.model.type, id: req.params.itemId },
                        kind: options.kind,
                        action: options.action,
                        actor: getActor(req.auth.credentials.user),
                    };
                case 'update':
                    return {
                        data: req.payload,
                        target: { type: options.model.type, id: req.params.itemId },
                        kind: options.kind,
                        action: options.action,
                        actor: getActor(req.auth.credentials.user),
                    };
                case 'delete':
                    return {
                        data: req.payload,
                        target: { type: options.model.type, id: req.params.itemId },
                        kind: options.kind,
                        action: options.action,
                        actor: getActor(req.auth.credentials.user),
                    };
                case 'query':
                    return {
                        target: { type: options.model.type },
                        kind: options.kind,
                        action: options.action,
                        actor: getActor(req.auth.credentials.user),
                    };
            }
        }
        else if (options.kind === 'relationship') {
            var childModel = services.plump.types[options.model.schema.relationships[options.relationship].type.sides[options.relationship].otherType];
            switch (options.action) {
                case 'create':
                    return {
                        kind: options.kind,
                        action: options.action,
                        relationship: options.relationship,
                        actor: getActor(req.auth.credentials.user),
                        target: { type: options.model.type, id: req.params.itemId },
                        meta: req.payload.meta,
                        child: { type: childModel.type, id: req.payload.id },
                    };
                case 'read':
                    return {
                        kind: options.kind,
                        action: options.action,
                        relationship: options.relationship,
                        actor: getActor(req.auth.credentials.user),
                        target: { type: options.model.type, id: req.params.itemId },
                    };
                case 'update':
                    return {
                        kind: options.kind,
                        action: options.action,
                        relationship: options.relationship,
                        actor: getActor(req.auth.credentials.user),
                        target: { type: options.model.type, id: req.params.itemId },
                        child: { type: childModel.type, id: req.payload.id },
                        meta: req.payload.meta,
                    };
                case 'delete':
                    return {
                        kind: options.kind,
                        action: options.action,
                        relationship: options.relationship,
                        actor: getActor(req.auth.credentials.user),
                        target: { type: options.model.type, id: req.params.itemId },
                        child: { type: childModel.type, id: req.payload.id },
                    };
            }
        }
    };
}
exports.authorize = function (options, services) {
    return function (o) {
        var i = mergeOptions({}, o);
        if (services.oracle && services.oracle.authorizers[options.model.type]) {
            if (i.config.pre === undefined) {
                i.config.pre = [];
            }
            var authMap_1 = generateAuthRequest(options, services);
            i.config.pre = i.config.pre.concat({
                assign: 'authorize',
                method: function (req, reply) {
                    services.oracle.dispatch(authMap_1(req)).then(function (v) {
                        if (v.result === true) {
                            reply(true);
                        }
                        else {
                            reply(Boom.unauthorized());
                        }
                    });
                },
            });
        }
        return i;
    };
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,
