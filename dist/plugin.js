"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function compose(o, services, funs) {
    return function (initial) {
        if (initial === void 0) { initial = {}; }
        return funs
            .map(function (f) { return f(o, services); })
            .reduce(function (acc, v) { return v(acc) || acc; }, initial);
    };
}
function plugin(ctrl, routeOptions, services) {
    function p(server, _, next) {
        var routes = [];
        ctrl.attributes.forEach(function (action) {
            var o = Object.assign({}, routeOptions, {
                kind: 'attributes',
                action: action,
            });
            routes.push(compose(o, services, ctrl.generators)());
        });
        Object.keys(routeOptions.model.schema.relationships).forEach(function (relationship) {
            ctrl.relationships.forEach(function (action) {
                var o = Object.assign({}, routeOptions, {
                    kind: 'relationship',
                    action: action,
                    relationship: relationship,
                });
                routes.push(compose(o, services, ctrl.generators)());
            });
        });
        ctrl.other.forEach(function (action) {
            var o = Object.assign({}, routeOptions, {
                kind: 'other',
                action: action,
            });
            routes.push(compose(o, services, ctrl.generators)());
        });
        server.route(routes.filter(function (v) { return !!v; }));
        next();
    }
    p['attributes'] = Object.assign({}, {
        version: '1.0.0',
        name: routeOptions.model.type,
    });
    return p;
}
exports.plugin = plugin;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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aW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2RlbCwgTW9kZWxEYXRhLCBNb2RlbFJlZmVyZW5jZSB9IGZyb20gJ3BsdW1wJztcbmltcG9ydCAqIGFzIEhhcGkgZnJvbSAnaGFwaSc7XG5pbXBvcnQge1xuICBUcmFuc2Zvcm1lcixcbiAgUm91dGVHZW5lcmF0b3IsXG4gIFNlZ21lbnRHZW5lcmF0b3IsXG4gIEJhc2ljUm91dGVPcHRpb25zLFxuICBTdHJ1dFJvdXRlQ29uZmlndXJhdGlvbixcbiAgUm91dGVPcHRpb25zLFxuICBTdHJ1dFNlcnZpY2VzLFxuICBSb3V0ZUNvbnRyb2xsZXIsXG59IGZyb20gJy4vZGF0YVR5cGVzJztcblxuZnVuY3Rpb24gY29tcG9zZShcbiAgbzogUm91dGVPcHRpb25zLFxuICBzZXJ2aWNlczogU3RydXRTZXJ2aWNlcyxcbiAgZnVuczogU2VnbWVudEdlbmVyYXRvcltdXG4pIHtcbiAgcmV0dXJuIChpbml0aWFsOiBQYXJ0aWFsPFN0cnV0Um91dGVDb25maWd1cmF0aW9uPiA9IHt9KSA9PlxuICAgIGZ1bnNcbiAgICAgIC5tYXAoZiA9PiBmKG8sIHNlcnZpY2VzKSlcbiAgICAgIC5yZWR1Y2UoKGFjYywgdikgPT4gdihhY2MpIHx8IGFjYywgaW5pdGlhbCkgYXMgU3RydXRSb3V0ZUNvbmZpZ3VyYXRpb247XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwbHVnaW4oXG4gIGN0cmw6IFJvdXRlQ29udHJvbGxlcixcbiAgLy8gZ2VuOiBTZWdtZW50R2VuZXJhdG9yW10sXG4gIHJvdXRlT3B0aW9uczogQmFzaWNSb3V0ZU9wdGlvbnMsXG4gIHNlcnZpY2VzOiBTdHJ1dFNlcnZpY2VzXG4pIHtcbiAgZnVuY3Rpb24gcChzZXJ2ZXI6IEhhcGkuU2VydmVyLCBfLCBuZXh0KSB7XG4gICAgY29uc3Qgcm91dGVzOiBIYXBpLlJvdXRlQ29uZmlndXJhdGlvbltdID0gW107XG4gICAgY3RybC5hdHRyaWJ1dGVzLmZvckVhY2goYWN0aW9uID0+IHtcbiAgICAgIGNvbnN0IG8gPSBPYmplY3QuYXNzaWduKHt9LCByb3V0ZU9wdGlvbnMsIHtcbiAgICAgICAga2luZDogJ2F0dHJpYnV0ZXMnLFxuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgIH0pIGFzIFJvdXRlT3B0aW9ucztcbiAgICAgIHJvdXRlcy5wdXNoKGNvbXBvc2Uobywgc2VydmljZXMsIGN0cmwuZ2VuZXJhdG9ycykoKSk7XG4gICAgfSk7XG4gICAgT2JqZWN0LmtleXMoXG4gICAgICByb3V0ZU9wdGlvbnMubW9kZWwuc2NoZW1hLnJlbGF0aW9uc2hpcHNcbiAgICApLmZvckVhY2gocmVsYXRpb25zaGlwID0+IHtcbiAgICAgIGN0cmwucmVsYXRpb25zaGlwcy5mb3JFYWNoKGFjdGlvbiA9PiB7XG4gICAgICAgIGNvbnN0IG8gPSBPYmplY3QuYXNzaWduKHt9LCByb3V0ZU9wdGlvbnMsIHtcbiAgICAgICAgICBraW5kOiAncmVsYXRpb25zaGlwJyxcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICByZWxhdGlvbnNoaXA6IHJlbGF0aW9uc2hpcCxcbiAgICAgICAgfSkgYXMgUm91dGVPcHRpb25zO1xuICAgICAgICByb3V0ZXMucHVzaChjb21wb3NlKG8sIHNlcnZpY2VzLCBjdHJsLmdlbmVyYXRvcnMpKCkpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgY3RybC5vdGhlci5mb3JFYWNoKGFjdGlvbiA9PiB7XG4gICAgICBjb25zdCBvID0gT2JqZWN0LmFzc2lnbih7fSwgcm91dGVPcHRpb25zLCB7XG4gICAgICAgIGtpbmQ6ICdvdGhlcicsXG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgfSkgYXMgUm91dGVPcHRpb25zO1xuICAgICAgcm91dGVzLnB1c2goY29tcG9zZShvLCBzZXJ2aWNlcywgY3RybC5nZW5lcmF0b3JzKSgpKTtcbiAgICB9KTtcbiAgICBzZXJ2ZXIucm91dGUocm91dGVzLmZpbHRlcih2ID0+ICEhdikpO1xuICAgIG5leHQoKTtcbiAgfVxuICBwWydhdHRyaWJ1dGVzJ10gPSBPYmplY3QuYXNzaWduKFxuICAgIHt9LFxuICAgIHtcbiAgICAgIHZlcnNpb246ICcxLjAuMCcsXG4gICAgICBuYW1lOiByb3V0ZU9wdGlvbnMubW9kZWwudHlwZSxcbiAgICB9XG4gICk7XG4gIHJldHVybiBwO1xufVxuIl19
