"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function compose() {
    var funs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        funs[_i] = arguments[_i];
    }
    return function (initial) {
        if (initial === void 0) { initial = {}; }
        return funs.reduce(function (acc, v) { return v(acc); }, initial);
    };
}
function plugin(gen, routeOptions, services) {
    function p(server, _, next) {
        var routes = [];
        ['create', 'read', 'update', 'delete', 'query'].forEach(function (action) {
            var o = Object.assign({}, routeOptions, {
                kind: 'attributes',
                action: action,
            });
            routes.push(compose(gen.base(o, services), gen.joi(o, services), gen.authorize(o, services), gen.handle(o, services))());
        });
        Object.keys(routeOptions.model.schema.relationships).forEach(function (relationship) {
            ['create', 'read', 'update', 'delete'].forEach(function (action) {
                var o = Object.assign({}, routeOptions, {
                    kind: 'relationship',
                    action: action,
                    relationship: relationship,
                });
                routes.push(compose(gen.base(o, services), gen.joi(o, services), gen.authorize(o, services), gen.handle(o, services))());
            });
        });
        server.route(routes);
        next();
    }
    p['attributes'] = Object.assign({}, {
        version: '1.0.0',
        name: routeOptions.model.type,
    });
    return p;
}
exports.plugin = plugin;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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J3BsdW1wJztcbmltcG9ydCAqIGFzIEhhcGkgZnJvbSAnaGFwaSc7XG5pbXBvcnQge1xuICBUcmFuc2Zvcm1lcixcbiAgU3RydXRSb3V0ZUNvbmZpZ3VyYXRpb24sXG4gIFJvdXRlR2VuZXJhdG9yLFxuICBCYXNpY1JvdXRlT3B0aW9ucyxcbiAgUm91dGVPcHRpb25zLFxuICBTdHJ1dFNlcnZpY2VzLFxufSBmcm9tICcuL2RhdGFUeXBlcyc7XG5cbmZ1bmN0aW9uIGNvbXBvc2UoLi4uZnVuczogVHJhbnNmb3JtZXJbXSkge1xuICByZXR1cm4gKGluaXRpYWw6IFBhcnRpYWw8U3RydXRSb3V0ZUNvbmZpZ3VyYXRpb24+ID0ge30pID0+XG4gICAgZnVucy5yZWR1Y2UoKGFjYywgdikgPT4gdihhY2MpLCBpbml0aWFsKSBhcyBTdHJ1dFJvdXRlQ29uZmlndXJhdGlvbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBsdWdpbihcbiAgZ2VuOiBSb3V0ZUdlbmVyYXRvcixcbiAgcm91dGVPcHRpb25zOiBCYXNpY1JvdXRlT3B0aW9ucyxcbiAgc2VydmljZXM6IFN0cnV0U2VydmljZXNcbikge1xuICBmdW5jdGlvbiBwKHNlcnZlcjogSGFwaS5TZXJ2ZXIsIF8sIG5leHQpIHtcbiAgICBjb25zdCByb3V0ZXM6IEhhcGkuUm91dGVDb25maWd1cmF0aW9uW10gPSBbXTtcbiAgICBbJ2NyZWF0ZScsICdyZWFkJywgJ3VwZGF0ZScsICdkZWxldGUnLCAncXVlcnknXS5mb3JFYWNoKGFjdGlvbiA9PiB7XG4gICAgICBjb25zdCBvID0gT2JqZWN0LmFzc2lnbih7fSwgcm91dGVPcHRpb25zLCB7XG4gICAgICAgIGtpbmQ6ICdhdHRyaWJ1dGVzJyxcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICB9KSBhcyBSb3V0ZU9wdGlvbnM7XG4gICAgICByb3V0ZXMucHVzaChcbiAgICAgICAgY29tcG9zZShcbiAgICAgICAgICBnZW4uYmFzZShvLCBzZXJ2aWNlcyksXG4gICAgICAgICAgZ2VuLmpvaShvLCBzZXJ2aWNlcyksXG4gICAgICAgICAgZ2VuLmF1dGhvcml6ZShvLCBzZXJ2aWNlcyksXG4gICAgICAgICAgZ2VuLmhhbmRsZShvLCBzZXJ2aWNlcylcbiAgICAgICAgKSgpXG4gICAgICApO1xuICAgIH0pO1xuICAgIE9iamVjdC5rZXlzKFxuICAgICAgcm91dGVPcHRpb25zLm1vZGVsLnNjaGVtYS5yZWxhdGlvbnNoaXBzXG4gICAgKS5mb3JFYWNoKHJlbGF0aW9uc2hpcCA9PiB7XG4gICAgICBbJ2NyZWF0ZScsICdyZWFkJywgJ3VwZGF0ZScsICdkZWxldGUnXS5mb3JFYWNoKGFjdGlvbiA9PiB7XG4gICAgICAgIGNvbnN0IG8gPSBPYmplY3QuYXNzaWduKHt9LCByb3V0ZU9wdGlvbnMsIHtcbiAgICAgICAgICBraW5kOiAncmVsYXRpb25zaGlwJyxcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICByZWxhdGlvbnNoaXA6IHJlbGF0aW9uc2hpcCxcbiAgICAgICAgfSkgYXMgUm91dGVPcHRpb25zO1xuICAgICAgICByb3V0ZXMucHVzaChcbiAgICAgICAgICBjb21wb3NlKFxuICAgICAgICAgICAgZ2VuLmJhc2Uobywgc2VydmljZXMpLFxuICAgICAgICAgICAgZ2VuLmpvaShvLCBzZXJ2aWNlcyksXG4gICAgICAgICAgICBnZW4uYXV0aG9yaXplKG8sIHNlcnZpY2VzKSxcbiAgICAgICAgICAgIGdlbi5oYW5kbGUobywgc2VydmljZXMpXG4gICAgICAgICAgKSgpXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICAvLyByb3V0ZXMuZm9yRWFjaChyb3V0ZSA9PiB7XG4gICAgLy8gICBjb25zb2xlLmxvZyhgcm91dGluZyAke3JvdXRlLm1ldGhvZH0gJHtyb3V0ZS5wYXRofWApO1xuICAgIC8vICAgc2VydmVyLnJvdXRlKHJvdXRlKTtcbiAgICAvLyB9KTtcbiAgICBzZXJ2ZXIucm91dGUocm91dGVzKTtcbiAgICBuZXh0KCk7XG4gIH1cbiAgcFsnYXR0cmlidXRlcyddID0gT2JqZWN0LmFzc2lnbihcbiAgICB7fSxcbiAgICB7XG4gICAgICB2ZXJzaW9uOiAnMS4wLjAnLFxuICAgICAgbmFtZTogcm91dGVPcHRpb25zLm1vZGVsLnR5cGUsXG4gICAgfVxuICApO1xuICByZXR1cm4gcDtcbn1cbiJdfQ==
