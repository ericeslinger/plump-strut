"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function compose(o, services, funs) {
    return function (initial) {
        if (initial === void 0) { initial = {}; }
        return funs
            .map(function (f) { return f(o, services); })
            .reduce(function (acc, v) { return v(acc); }, initial);
    };
}
function plugin(gen, routeOptions, services) {
    function p(server, _, next) {
        var routes = [];
        ['create', 'read', 'update', 'delete', 'query'].forEach(function (action) {
            var o = Object.assign({}, routeOptions, {
                kind: 'attributes',
                action: action,
            });
            routes.push(compose(o, services, gen)());
        });
        Object.keys(routeOptions.model.schema.relationships).forEach(function (relationship) {
            ['create', 'read', 'update', 'delete'].forEach(function (action) {
                var o = Object.assign({}, routeOptions, {
                    kind: 'relationship',
                    action: action,
                    relationship: relationship,
                });
                routes.push(compose(o, services, gen)());
            });
        });
        server.route(routes.filter(function (v) { return !!v; }));
        next();
    }
    p['attributes'] = Object.assign({}, {
        version: '1.0.0',
        name: routeOptions.model.type,
    });
    return p;
}
exports.plugin = plugin;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wbHVnaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFZQSxpQkFDRSxDQUFlLEVBQ2YsUUFBdUIsRUFDdkIsSUFBd0I7SUFFeEIsTUFBTSxDQUFDLFVBQUMsT0FBOEM7UUFBOUMsd0JBQUEsRUFBQSxZQUE4QztRQUNwRCxPQUFBLElBQUk7YUFDRCxHQUFHLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxFQUFkLENBQWMsQ0FBQzthQUN4QixNQUFNLENBQUMsVUFBQyxHQUFHLEVBQUUsQ0FBQyxJQUFLLE9BQUEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFOLENBQU0sRUFBRSxPQUFPLENBQTRCO0lBRmpFLENBRWlFLENBQUM7QUFDdEUsQ0FBQztBQUVELGdCQUNFLEdBQXVCLEVBQ3ZCLFlBQStCLEVBQy9CLFFBQXVCO0lBRXZCLFdBQVcsTUFBbUIsRUFBRSxDQUFDLEVBQUUsSUFBSTtRQUNyQyxJQUFNLE1BQU0sR0FBOEIsRUFBRSxDQUFDO1FBQzdDLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLE1BQU07WUFDNUQsSUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsWUFBWSxFQUFFO2dCQUN4QyxJQUFJLEVBQUUsWUFBWTtnQkFDbEIsTUFBTSxFQUFFLE1BQU07YUFDZixDQUFpQixDQUFDO1lBQ25CLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzNDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLElBQUksQ0FDVCxZQUFZLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQ3hDLENBQUMsT0FBTyxDQUFDLFVBQUEsWUFBWTtZQUNwQixDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLE1BQU07Z0JBQ25ELElBQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLFlBQVksRUFBRTtvQkFDeEMsSUFBSSxFQUFFLGNBQWM7b0JBQ3BCLE1BQU0sRUFBRSxNQUFNO29CQUNkLFlBQVksRUFBRSxZQUFZO2lCQUMzQixDQUFpQixDQUFDO2dCQUNuQixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUMzQyxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLENBQUMsRUFBSCxDQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLElBQUksRUFBRSxDQUFDO0lBQ1QsQ0FBQztJQUNELENBQUMsQ0FBQyxZQUFZLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUM3QixFQUFFLEVBQ0Y7UUFDRSxPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJO0tBQzlCLENBQ0YsQ0FBQztJQUNGLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDWCxDQUFDO0FBckNELHdCQXFDQyIsImZpbGUiOiJwbHVnaW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2RlbCwgTW9kZWxEYXRhLCBNb2RlbFJlZmVyZW5jZSB9IGZyb20gJ3BsdW1wJztcbmltcG9ydCAqIGFzIEhhcGkgZnJvbSAnaGFwaSc7XG5pbXBvcnQge1xuICBUcmFuc2Zvcm1lcixcbiAgUm91dGVHZW5lcmF0b3IsXG4gIFNlZ21lbnRHZW5lcmF0b3IsXG4gIEJhc2ljUm91dGVPcHRpb25zLFxuICBTdHJ1dFJvdXRlQ29uZmlndXJhdGlvbixcbiAgUm91dGVPcHRpb25zLFxuICBTdHJ1dFNlcnZpY2VzLFxufSBmcm9tICcuL2RhdGFUeXBlcyc7XG5cbmZ1bmN0aW9uIGNvbXBvc2UoXG4gIG86IFJvdXRlT3B0aW9ucyxcbiAgc2VydmljZXM6IFN0cnV0U2VydmljZXMsXG4gIGZ1bnM6IFNlZ21lbnRHZW5lcmF0b3JbXVxuKSB7XG4gIHJldHVybiAoaW5pdGlhbDogUGFydGlhbDxTdHJ1dFJvdXRlQ29uZmlndXJhdGlvbj4gPSB7fSkgPT5cbiAgICBmdW5zXG4gICAgICAubWFwKGYgPT4gZihvLCBzZXJ2aWNlcykpXG4gICAgICAucmVkdWNlKChhY2MsIHYpID0+IHYoYWNjKSwgaW5pdGlhbCkgYXMgU3RydXRSb3V0ZUNvbmZpZ3VyYXRpb247XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwbHVnaW4oXG4gIGdlbjogU2VnbWVudEdlbmVyYXRvcltdLFxuICByb3V0ZU9wdGlvbnM6IEJhc2ljUm91dGVPcHRpb25zLFxuICBzZXJ2aWNlczogU3RydXRTZXJ2aWNlc1xuKSB7XG4gIGZ1bmN0aW9uIHAoc2VydmVyOiBIYXBpLlNlcnZlciwgXywgbmV4dCkge1xuICAgIGNvbnN0IHJvdXRlczogSGFwaS5Sb3V0ZUNvbmZpZ3VyYXRpb25bXSA9IFtdO1xuICAgIFsnY3JlYXRlJywgJ3JlYWQnLCAndXBkYXRlJywgJ2RlbGV0ZScsICdxdWVyeSddLmZvckVhY2goYWN0aW9uID0+IHtcbiAgICAgIGNvbnN0IG8gPSBPYmplY3QuYXNzaWduKHt9LCByb3V0ZU9wdGlvbnMsIHtcbiAgICAgICAga2luZDogJ2F0dHJpYnV0ZXMnLFxuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgIH0pIGFzIFJvdXRlT3B0aW9ucztcbiAgICAgIHJvdXRlcy5wdXNoKGNvbXBvc2Uobywgc2VydmljZXMsIGdlbikoKSk7XG4gICAgfSk7XG4gICAgT2JqZWN0LmtleXMoXG4gICAgICByb3V0ZU9wdGlvbnMubW9kZWwuc2NoZW1hLnJlbGF0aW9uc2hpcHNcbiAgICApLmZvckVhY2gocmVsYXRpb25zaGlwID0+IHtcbiAgICAgIFsnY3JlYXRlJywgJ3JlYWQnLCAndXBkYXRlJywgJ2RlbGV0ZSddLmZvckVhY2goYWN0aW9uID0+IHtcbiAgICAgICAgY29uc3QgbyA9IE9iamVjdC5hc3NpZ24oe30sIHJvdXRlT3B0aW9ucywge1xuICAgICAgICAgIGtpbmQ6ICdyZWxhdGlvbnNoaXAnLFxuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIHJlbGF0aW9uc2hpcDogcmVsYXRpb25zaGlwLFxuICAgICAgICB9KSBhcyBSb3V0ZU9wdGlvbnM7XG4gICAgICAgIHJvdXRlcy5wdXNoKGNvbXBvc2Uobywgc2VydmljZXMsIGdlbikoKSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBzZXJ2ZXIucm91dGUocm91dGVzLmZpbHRlcih2ID0+ICEhdikpO1xuICAgIG5leHQoKTtcbiAgfVxuICBwWydhdHRyaWJ1dGVzJ10gPSBPYmplY3QuYXNzaWduKFxuICAgIHt9LFxuICAgIHtcbiAgICAgIHZlcnNpb246ICcxLjAuMCcsXG4gICAgICBuYW1lOiByb3V0ZU9wdGlvbnMubW9kZWwudHlwZSxcbiAgICB9XG4gICk7XG4gIHJldHVybiBwO1xufVxuIl19
