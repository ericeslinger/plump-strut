'use strict';

var _plump = require('plump');

var _base = require('../base');

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _hapi = require('hapi');

var _hapi2 = _interopRequireDefault(_hapi);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_chai2.default.use(_chaiAsPromised2.default); /* eslint-env node, mocha*/
/* eslint no-shadow: 0 */

var expect = _chai2.default.expect;
describe('Base Plump Routes', function () {
  var ms = new _plump.MemoryStore({ terminal: true });
  var plump = new _plump.Plump({ types: [_plump.TestType], storage: [ms] });
  var basePlugin = new _base.BaseController(plump, _plump.TestType);
  var hapi = new _hapi2.default.Server();
  hapi.connection({ port: 80 });

  before(function () {
    return hapi.register(basePlugin.plugin, { routes: { prefix: '/api' } });
  });

  it('Exposes the object schema at /schema', function () {
    return hapi.inject('/api/schema').then(function (response) {
      return expect(JSON.parse(response.payload).schema).to.deep.equal(_plump.TestType.toJSON());
    });
  });

  it('C', function () {
    return hapi.inject({
      method: 'POST',
      url: '/api',
      payload: JSON.stringify({ name: 'potato' })
    }).then(function (response) {
      return expect(JSON.parse(response.payload)).to.have.property('name', 'potato');
    });
  });

  it('R', function () {
    var one = new _plump.TestType({ name: 'potato' }, plump);
    return one.$save().then(function () {
      return hapi.inject('/api/' + one.$id);
    }).then(function (response) {
      return expect(one.$get()).to.eventually.deep.equal(JSON.parse(response.payload).tests[0]);
    });
  });

  it('U', function () {
    var one = new _plump.TestType({ name: 'potato' }, plump);
    return one.$save().then(function () {
      return hapi.inject({
        method: 'PATCH',
        url: '/api/' + one.$id,
        payload: JSON.stringify({ name: 'grotato' })
      });
    }).then(function () {
      return expect(one.$get()).to.eventually.have.property('name', 'grotato');
    });
  });

  it('D', function () {
    var one = new _plump.TestType({ name: 'potato' }, plump);
    var id = void 0;
    return one.$save().then(function () {
      return hapi.inject('/api/' + one.$id);
    }).then(function (response) {
      id = one.$id;
      return expect(one.$get()).to.eventually.deep.equal(JSON.parse(response.payload).tests[0]);
    }).then(function () {
      return hapi.inject({
        method: 'DELETE',
        url: '/api/' + one.$id
      });
    }).then(function () {
      return expect(hapi.inject('/api/' + id)).to.eventually.have.property('statusCode', 404);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvY3J1ZC5zcGVjLmpzIl0sIm5hbWVzIjpbInVzZSIsImV4cGVjdCIsImRlc2NyaWJlIiwibXMiLCJ0ZXJtaW5hbCIsInBsdW1wIiwidHlwZXMiLCJzdG9yYWdlIiwiYmFzZVBsdWdpbiIsImhhcGkiLCJTZXJ2ZXIiLCJjb25uZWN0aW9uIiwicG9ydCIsImJlZm9yZSIsInJlZ2lzdGVyIiwicGx1Z2luIiwicm91dGVzIiwicHJlZml4IiwiaXQiLCJpbmplY3QiLCJ0aGVuIiwicmVzcG9uc2UiLCJKU09OIiwicGFyc2UiLCJwYXlsb2FkIiwic2NoZW1hIiwidG8iLCJkZWVwIiwiZXF1YWwiLCJ0b0pTT04iLCJtZXRob2QiLCJ1cmwiLCJzdHJpbmdpZnkiLCJuYW1lIiwiaGF2ZSIsInByb3BlcnR5Iiwib25lIiwiJHNhdmUiLCIkaWQiLCIkZ2V0IiwiZXZlbnR1YWxseSIsInRlc3RzIiwiaWQiXSwibWFwcGluZ3MiOiI7O0FBR0E7O0FBQ0E7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQSxlQUFLQSxHQUFMLDJCLENBVkE7QUFDQTs7QUFVQSxJQUFNQyxTQUFTLGVBQUtBLE1BQXBCO0FBQ0FDLFNBQVMsbUJBQVQsRUFBOEIsWUFBTTtBQUNsQyxNQUFNQyxLQUFLLHVCQUFnQixFQUFFQyxVQUFVLElBQVosRUFBaEIsQ0FBWDtBQUNBLE1BQU1DLFFBQVEsaUJBQVUsRUFBRUMsT0FBTyxpQkFBVCxFQUFxQkMsU0FBUyxDQUFDSixFQUFELENBQTlCLEVBQVYsQ0FBZDtBQUNBLE1BQU1LLGFBQWEseUJBQW1CSCxLQUFuQixrQkFBbkI7QUFDQSxNQUFNSSxPQUFPLElBQUksZUFBS0MsTUFBVCxFQUFiO0FBQ0FELE9BQUtFLFVBQUwsQ0FBZ0IsRUFBRUMsTUFBTSxFQUFSLEVBQWhCOztBQUVBQyxTQUFPLFlBQU07QUFDWCxXQUFPSixLQUFLSyxRQUFMLENBQWNOLFdBQVdPLE1BQXpCLEVBQWlDLEVBQUVDLFFBQVEsRUFBRUMsUUFBUSxNQUFWLEVBQVYs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QUFLQyxLQUFMLENBQVdGLFNBQVNHLE9BQXBCLEVBQTZCaUIsS0FBN0IsQ0FBbUMsQ0FBbkMsQ0FBNUMsQ0FBUDtBQUNELEtBTE0sRUFLSnJCLElBTEksQ0FLQyxZQUFNO0FBQ1osYUFBT1gsS0FBS1UsTUFBTCxDQUFZO0FBQ2pCVyxnQkFBUSxRQURTO0FBRWpCQyx1QkFBYUssSUFBSUU7QUFGQSxPQUFaLENBQVA7QUFJRCxLQVZNLEVBVUpsQixJQVZJLENBVUMsWUFBTTtBQUNaLGFBQU9uQixPQUFPUSxLQUFLVSxNQUFMLFdBQW9CdUIsRUFBcEIsQ0FBUCxFQUFrQ2hCLEVBQWxDLENBQXFDYyxVQUFyQyxDQUFnRE4sSUFBaEQsQ0FBcURDLFFBQXJELENBQThELFlBQTlELEVBQTRFLEdBQTVFLENBQVA7QUFDRCxLQVpNLENBQVA7QUFhRCxHQWhCRDtBQWlCRCxDQXBFRCIsImZpbGUiOiJ0ZXN0L2NydWQuc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1lbnYgbm9kZSwgbW9jaGEqL1xuLyogZXNsaW50IG5vLXNoYWRvdzogMCAqL1xuXG5pbXBvcnQgeyBUZXN0VHlwZSwgUGx1bXAsIE1lbW9yeVN0b3JlIH0gZnJvbSAncGx1bXAnO1xuaW1wb3J0IHsgQmFzZUNvbnRyb2xsZXIgfSBmcm9tICcuLi9iYXNlJztcblxuaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgSGFwaSBmcm9tICdoYXBpJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcblxuY2hhaS51c2UoY2hhaUFzUHJvbWlzZWQpO1xuY29uc3QgZXhwZWN0ID0gY2hhaS5leHBlY3Q7XG5kZXNjcmliZSgnQmFzZSBQbHVtcCBSb3V0ZXMnLCAoKSA9PiB7XG4gIGNvbnN0IG1zID0gbmV3IE1lbW9yeVN0b3JlKHsgdGVybWluYWw6IHRydWUgfSk7XG4gIGNvbnN0IHBsdW1wID0gbmV3IFBsdW1wKHsgdHlwZXM6IFtUZXN0VHlwZV0sIHN0b3JhZ2U6IFttc10gfSk7XG4gIGNvbnN0IGJhc2VQbHVnaW4gPSBuZXcgQmFzZUNvbnRyb2xsZXIocGx1bXAsIFRlc3RUeXBlKTtcbiAgY29uc3QgaGFwaSA9IG5ldyBIYXBpLlNlcnZlcigpO1xuICBoYXBpLmNvbm5lY3Rpb24oeyBwb3J0OiA4MCB9KTtcblxuICBiZWZvcmUoKCkgPT4ge1xuICAgIHJldHVybiBoYXBpLnJlZ2lzdGVyKGJhc2VQbHVnaW4ucGx1Z2luLCB7IHJvdXRlczogeyBwcmVmaXg6ICcvYXBpJyB9IH0pO1xuICB9KTtcblxuICBpdCgnRXhwb3NlcyB0aGUgb2JqZWN0IHNjaGVtYSBhdCAvc2NoZW1hJywgKCkgPT4ge1xuICAgIHJldHVybiBoYXBpLmluamVjdCgnL2FwaS9zY2hlbWEnKVxuICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgcmV0dXJuIGV4cGVjdChKU09OLnBhcnNlKHJlc3BvbnNlLnBheWxvYWQpLnNjaGVtYSkudG8uZGVlcC5lcXVhbChUZXN0VHlwZS50b0pTT04oKSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdDJywgKCkgPT4ge1xuICAgIHJldHVybiBoYXBpLmluamVjdCh7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIHVybDogJy9hcGknLFxuICAgICAgcGF5bG9hZDogSlNPTi5zdHJpbmdpZnkoeyBuYW1lOiAncG90YXRvJyB9KSxcbiAgICB9KVxuICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgcmV0dXJuIGV4cGVjdChKU09OLnBhcnNlKHJlc3BvbnNlLnBheWxvYWQpKS50by5oYXZlLnByb3BlcnR5KCduYW1lJywgJ3BvdGF0bycpO1xuICAgIH0pO1xuICB9KTtcblxuICBpdCgnUicsICgpID0+IHtcbiAgICBjb25zdCBvbmUgPSBuZXcgVGVzdFR5cGUoeyBuYW1lOiAncG90YXRvJyB9LCBwbHVtcCk7XG4gICAgcmV0dXJuIG9uZS4kc2F2ZSgpXG4gICAgLnRoZW4oKCkgPT4gaGFwaS5pbmplY3QoYC9hcGkvJHtvbmUuJGlkfWApKVxuICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgcmV0dXJuIGV4cGVjdChvbmUuJGdldCgpKS50by5ldmVudHVhbGx5LmRlZXAuZXF1YWwoSlNPTi5wYXJzZShyZXNwb25zZS5wYXlsb2FkKS50ZXN0c1swXSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdVJywgKCkgPT4ge1xuICAgIGNvbnN0IG9uZSA9IG5ldyBUZXN0VHlwZSh7IG5hbWU6ICdwb3RhdG8nIH0sIHBsdW1wKTtcbiAgICByZXR1cm4gb25lLiRzYXZlKClcbiAgICAudGhlbigoKSA9PiB7XG4gICAgICByZXR1cm4gaGFwaS5pbmplY3Qoe1xuICAgICAgICBtZXRob2Q6ICdQQVRDSCcsXG4gICAgICAgIHVybDogYC9hcGkvJHtvbmUuJGlkfWAsXG4gICAgICAgIHBheWxvYWQ6IEpTT04uc3RyaW5naWZ5KHsgbmFtZTogJ2dyb3RhdG8nIH0pLFxuICAgICAgfSk7XG4gICAgfSlcbiAgICAudGhlbigoKSA9PiBleHBlY3Qob25lLiRnZXQoKSkudG8uZXZlbnR1YWxseS5oYXZlLnByb3BlcnR5KCduYW1lJywgJ2dyb3RhdG8nKSk7XG4gIH0pO1xuXG4gIGl0KCdEJywgKCkgPT4ge1xuICAgIGNvbnN0IG9uZSA9IG5ldyBUZXN0VHlwZSh7IG5hbWU6ICdwb3RhdG8nIH0sIHBsdW1wKTtcbiAgICBsZXQgaWQ7XG4gICAgcmV0dXJuIG9uZS4kc2F2ZSgpXG4gICAgLnRoZW4oKCkgPT4gaGFwaS5pbmplY3QoYC9hcGkvJHtvbmUuJGlkfWApKVxuICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgaWQgPSBvbmUuJGlkO1xuICAgICAgcmV0dXJuIGV4cGVjdChvbmUuJGdldCgpKS50by5ldmVudHVhbGx5LmRlZXAuZXF1YWwoSlNPTi5wYXJzZShyZXNwb25zZS5wYXlsb2FkKS50ZXN0c1swXSk7XG4gICAgfSkudGhlbigoKSA9PiB7XG4gICAgICByZXR1cm4gaGFwaS5pbmplY3Qoe1xuICAgICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAgICB1cmw6IGAvYXBpLyR7b25lLiRpZH1gLFxuICAgICAgfSk7XG4gICAgfSkudGhlbigoKSA9PiB7XG4gICAgICByZXR1cm4gZXhwZWN0KGhhcGkuaW5qZWN0KGAvYXBpLyR7aWR9YCkpLnRvLmV2ZW50dWFsbHkuaGF2ZS5wcm9wZXJ0eSgnc3RhdHVzQ29kZScsIDQwNCk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=
