'use strict';

var _plump = require('plump');

var _base = require('../base');

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _hapi = require('hapi');

var _hapi2 = _interopRequireDefault(_hapi);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_chai2.default.use(_chaiAsPromised2.default); /* eslint-env node, mocha*/
/* eslint no-shadow: 0 */

var expect = _chai2.default.expect;
describe('HasMany Plump Routes', function () {
  var ms = new _plump.MemoryStore({ terminal: true });
  var plump = new _plump.Plump({ types: [_plump.TestType], storage: [ms] });
  var basePlugin = new _base.BaseController(plump, _plump.TestType);
  var hapi = new _hapi2.default.Server();
  hapi.connection({ port: 80 });

  before(function () {
    return hapi.register(basePlugin.plugin, { routes: { prefix: '/api' } });
  });

  it('C', function () {
    var one = new _plump.TestType({ name: 'potato' }, plump);
    return one.$save().then(function () {
      return hapi.inject({
        method: 'PUT',
        url: '/api/' + one.$id + '/children',
        payload: JSON.stringify({ child_id: 100 })
      });
    }).then(function (response) {
      expect(response).to.have.property('statusCode', 200);
      return expect(one.$get('children')).to.eventually.deep.equal({ children: [{ id: 100 }] });
    });
  });

  it('R', function () {
    var one = new _plump.TestType({ name: 'potato' }, plump);
    return one.$save().then(function () {
      return one.$add('children', 100);
    }).then(function () {
      return hapi.inject({
        method: 'GET',
        url: '/api/' + one.$id + '/children'
      });
    }).then(function (response) {
      expect(response).to.have.property('statusCode', 200);
      return expect(one.$get('children')).to.eventually.deep.equal({ children: [{ id: 100 }] });
    });
  });

  it('U', function () {
    var one = new _plump.TestType({ name: 'potato' }, plump);
    return one.$save().then(function () {
      return one.$add('valenceChildren', 100, { perm: 2 });
    }).then(function () {
      return expect(one.$get('valenceChildren')).to.eventually.deep.equal({ valenceChildren: [{ id: 100, perm: 2 }] });
    }).then(function () {
      return hapi.inject({
        method: 'PATCH',
        url: '/api/' + one.$id + '/valenceChildren/100',
        payload: JSON.stringify({ perm: 3 })
      });
    }).then(function () {
      return expect(plump.find('tests', one.$id).$get('valenceChildren')).to.eventually.deep.equal({ valenceChildren: [{ id: 100, perm: 3 }] });
    });
  });

  it('D', function () {
    var one = new _plump.TestType({ name: 'potato' }, plump);
    return one.$save().then(function () {
      return one.$add('children', 100);
    }).then(function () {
      return expect(one.$get('children')).to.eventually.deep.equal({ children: [{ id: 100 }] });
    }).then(function () {
      return hapi.inject({
        method: 'DELETE',
        url: '/api/' + one.$id + '/children/100'
      });
    }).then(function () {
      return expect(plump.find('tests', one.$id).$get('children')).to.eventually.deep.equal({ children: [] });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
