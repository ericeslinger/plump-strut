"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Joi = require("joi");
function routeGen(options, strut) {
    var cookieOptions = Object.assign({}, {
        ttl: null,
        isSecure: true,
        isHttpOnly: true,
        encoding: 'base64json',
        isSameSite: false,
        clearInvalid: false,
        strictHeader: true,
    }, options.nonceCookie);
    var routeHandler = function (request, reply) {
        return options.handler(request, strut).then(function (r) {
            strut.io.to(request.state[options.name + "-nonce"].nonce).emit(request.state[options.name + "-nonce"].nonce, {
                response: 'token',
                status: 'success',
                token: r.token,
            });
            reply(r.response).type('text/html').unstate(options.name + "-nonce");
        });
    };
    return function (server) {
        server.auth.strategy(options.name, 'bell', options.strategy);
        server.state(options.name + "-nonce", cookieOptions);
        server.route({
            method: ['GET', 'POST'],
            path: "/" + options.name,
            handler: routeHandler,
            config: {
                auth: options.name,
                state: {
                    parse: true,
                },
            },
        });
    };
}
function rebindTokenValidator(t) {
    return {
        validateFunc: function (token, callback) { return t.validate(token, callback); },
    };
}
exports.rebindTokenValidator = rebindTokenValidator;
function configureAuth(strut) {
    var plugin = function (s, _, next) {
        s.route({
            method: 'GET',
            path: '',
            handler: function (request, reply) {
                reply("\n          <html>\n            <head><meta http-equiv=\"refresh\" content=\"0; url=" + strut.config
                    .authRoot + "/" + request.query['method'] + "\" /></head>\n            <body>REDIRECTING " + request.query['method'] + " / " + request.query['nonce'] + "</body>\n          </html>\n        ")
                    .type('text/html')
                    .state(request.query['method'] + "-nonce", {
                    nonce: request.query['nonce'],
                });
            },
            config: {
                validate: {
                    query: {
                        method: Joi.string().required(),
                        nonce: Joi.string().required(),
                    },
                },
            },
        });
        strut.config.authTypes.forEach(function (t) { return routeGen(t, strut.services)(s); });
        next();
    };
    plugin.attributes = {
        version: '1.0.0',
        name: 'authentication',
    };
    return plugin;
}
exports.configureAuth = configureAuth;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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OUQsT0FBTyxDQUNSLHlDQUVGLENBQ0E7cUJBQ0UsSUFBSSxDQUFDLFdBQVcsQ0FBQztxQkFDakIsS0FBSyxDQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFdBQVEsRUFBRTtvQkFDekMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDO2lCQUM5QixDQUFDLENBQUM7WUFDUCxDQUFDO1lBQ0QsTUFBTSxFQUFFO2dCQUNOLFFBQVEsRUFBRTtvQkFDUixLQUFLLEVBQUU7d0JBQ0wsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7d0JBQy9CLEtBQUssRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO3FCQUMvQjtpQkFDRjthQUNGO1NBQ0YsQ0FBQyxDQUFDO1FBQ0gsS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsUUFBUSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQTlCLENBQThCLENBQUMsQ0FBQztRQUNwRSxJQUFJLEVBQUUsQ0FBQztJQUNULENBQUMsQ0FBQztJQUNGLE1BQU0sQ0FBQyxVQUFVLEdBQUc7UUFDbEIsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLGdCQUFnQjtLQUN2QixDQUFDO0lBQ0YsTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBMUNELHNDQTBDQyIsImZpbGUiOiJhdXRoZW50aWNhdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEpvaSBmcm9tICdqb2knO1xuaW1wb3J0ICogYXMgSGFwaSBmcm9tICdoYXBpJztcbmltcG9ydCAqIGFzIEJlbGwgZnJvbSAnYmVsbCc7XG5pbXBvcnQge1xuICBTdHJ1dENvbmZpZyxcbiAgQXV0aGVudGljYXRpb25TdHJhdGVneSxcbiAgVG9rZW5TZXJ2aWNlLFxuICBTdHJ1dFNlcnZpY2VzLFxuICBUb2tlblJlc3BvbnNlLFxufSBmcm9tICcuL2RhdGFUeXBlcyc7XG5pbXBvcnQgeyBNb2RlbERhdGEgfSBmcm9tICdwbHVtcCc7XG5pbXBvcnQgeyBTdHJ1dFNlcnZlciB9IGZyb20gJy4vZGF0YVR5cGVzJztcblxuZnVuY3Rpb24gcm91dGVHZW4ob3B0aW9uczogQXV0aGVudGljYXRpb25TdHJhdGVneSwgc3RydXQ6IFN0cnV0U2VydmljZXMpIHtcbiAgY29uc3QgY29va2llT3B0aW9uczogSGFwaS5TZXJ2ZXJTdGF0ZUNvb2tpZUNvbmZpZ3VhdGlvbk9iamVjdCA9IE9iamVjdC5hc3NpZ24oXG4gICAge30sXG4gICAge1xuICAgICAgdHRsOiBudWxsLFxuICAgICAgaXNTZWN1cmU6IHRydWUsXG4gICAgICBpc0h0dHBPbmx5OiB0cnVlLFxuICAgICAgZW5jb2Rpbmc6ICdiYXNlNjRqc29uJyxcbiAgICAgIGlzU2FtZVNpdGU6IGZhbHNlLFxuICAgICAgY2xlYXJJbnZhbGlkOiBmYWxzZSwgLy8gcmVtb3ZlIGludmFsaWQgY29va2llc1xuICAgICAgc3RyaWN0SGVhZGVyOiB0cnVlLCAvLyBkb24ndCBhbGxvdyB2aW9sYXRpb25zIG9mIFJGQyA2MjY1XG4gICAgfSxcbiAgICBvcHRpb25zLm5vbmNlQ29va2llLFxuICApO1xuICBjb25zdCByb3V0ZUhhbmRsZXI6IEhhcGkuUm91dGVIYW5kbGVyID0gKHJlcXVlc3QsIHJlcGx5KSA9PiB7XG4gICAgcmV0dXJuIG9wdGlvbnMuaGFuZGxlcihyZXF1ZXN0LCBzdHJ1dCkudGhlbihyID0+IHtcbiAgICAgIHN0cnV0LmlvLnRvKHJlcXVlc3Quc3RhdGVbYCR7b3B0aW9ucy5uYW1lfS1ub25jZWBdLm5vbmNlKS5lbWl0KFxuICAgICAgICByZXF1ZXN0LnN0YXRlW2Ake29wdGlvbnMubmFtZX0tbm9uY2VgXS5ub25jZSxcbiAgICAgICAge1xuICAgICAgICAgIHJlc3BvbnNlOiAndG9rZW4nLFxuICAgICAgICAgIHN0YXR1czogJ3N1Y2Nlc3MnLFxuICAgICAgICAgIHRva2VuOiByLnRva2VuLFxuICAgICAgICB9IGFzIFRva2VuUmVzcG9uc2UsXG4gICAgICApO1xuICAgICAgcmVwbHkoci5yZXNwb25zZSkudHlwZSgndGV4dC9odG1sJykudW5zdGF0ZShgJHtvcHRpb25zLm5hbWV9LW5vbmNlYCk7XG4gICAgfSk7XG4gIH07XG4gIHJldHVybiBzZXJ2ZXIgPT4ge1xuICAgIHNlcnZlci5hdXRoLnN0cmF0ZWd5KG9wdGlvbnMubmFtZSwgJ2JlbGwnLCBvcHRpb25zLnN0cmF0ZWd5KTtcbiAgICBzZXJ2ZXIuc3RhdGUoYCR7b3B0aW9ucy5uYW1lfS1ub25jZWAsIGNvb2tpZU9wdGlvbnMpO1xuICAgIHNlcnZlci5yb3V0ZSh7XG4gICAgICBtZXRob2Q6IFsnR0VUJywgJ1BPU1QnXSxcbiAgICAgIHBhdGg6IGAvJHtvcHRpb25zLm5hbWV9YCxcbiAgICAgIGhhbmRsZXI6IHJvdXRlSGFuZGxlcixcbiAgICAgIGNvbmZpZzoge1xuICAgICAgICBhdXRoOiBvcHRpb25zLm5hbWUsXG4gICAgICAgIHN0YXRlOiB7XG4gICAgICAgICAgcGFyc2U6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmViaW5kVG9rZW5WYWxpZGF0b3IodDogVG9rZW5TZXJ2aWNlKSB7XG4gIHJldHVybiB7XG4gICAgdmFsaWRhdGVGdW5jOiAodG9rZW4sIGNhbGxiYWNrKSA9PiB0LnZhbGlkYXRlKHRva2VuLCBjYWxsYmFjayksXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25maWd1cmVBdXRoKHN0cnV0OiBTdHJ1dFNlcnZlcikge1xuICBjb25zdCBwbHVnaW46IEhhcGkuUGx1Z2luRnVuY3Rpb248e1xuICAgIHZlcnNpb246IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gIH0+ID0gZnVuY3Rpb24ocywgXywgbmV4dCkge1xuICAgIHMucm91dGUoe1xuICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgIHBhdGg6ICcnLFxuICAgICAgaGFuZGxlcjogKHJlcXVlc3Q6IEhhcGkuUmVxdWVzdCwgcmVwbHk6IEhhcGkuQmFzZV9SZXBseSkgPT4ge1xuICAgICAgICByZXBseShcbiAgICAgICAgICBgXG4gICAgICAgICAgPGh0bWw+XG4gICAgICAgICAgICA8aGVhZD48bWV0YSBodHRwLWVxdWl2PVwicmVmcmVzaFwiIGNvbnRlbnQ9XCIwOyB1cmw9JHtzdHJ1dC5jb25maWdcbiAgICAgICAgICAgICAgLmF1dGhSb290fS8ke3JlcXVlc3QucXVlcnlbJ21ldGhvZCddfVwiIC8+PC9oZWFkPlxuICAgICAgICAgICAgPGJvZHk+UkVESVJFQ1RJTkcgJHtyZXF1ZXN0LnF1ZXJ5WydtZXRob2QnXX0gLyAke3JlcXVlc3QucXVlcnlbXG4gICAgICAgICAgICAnbm9uY2UnXG4gICAgICAgICAgXX08L2JvZHk+XG4gICAgICAgICAgPC9odG1sPlxuICAgICAgICBgLFxuICAgICAgICApXG4gICAgICAgICAgLnR5cGUoJ3RleHQvaHRtbCcpXG4gICAgICAgICAgLnN0YXRlKGAke3JlcXVlc3QucXVlcnlbJ21ldGhvZCddfS1ub25jZWAsIHtcbiAgICAgICAgICAgIG5vbmNlOiByZXF1ZXN0LnF1ZXJ5Wydub25jZSddLFxuICAgICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGNvbmZpZzoge1xuICAgICAgICB2YWxpZGF0ZToge1xuICAgICAgICAgIHF1ZXJ5OiB7XG4gICAgICAgICAgICBtZXRob2Q6IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpLFxuICAgICAgICAgICAgbm9uY2U6IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICAgIHN0cnV0LmNvbmZpZy5hdXRoVHlwZXMuZm9yRWFjaCh0ID0+IHJvdXRlR2VuKHQsIHN0cnV0LnNlcnZpY2VzKShzKSk7XG4gICAgbmV4dCgpO1xuICB9O1xuICBwbHVnaW4uYXR0cmlidXRlcyA9IHtcbiAgICB2ZXJzaW9uOiAnMS4wLjAnLFxuICAgIG5hbWU6ICdhdXRoZW50aWNhdGlvbicsXG4gIH07XG4gIHJldHVybiBwbHVnaW47XG59XG4iXX0=
