"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Joi = require("joi");
function routeGen(options, c) {
    var cookieOptions = Object.assign({}, {
        ttl: null,
        isSecure: true,
        isHttpOnly: true,
        encoding: 'base64json',
        isSameSite: false,
        clearInvalid: false,
        strictHeader: true,
    }, options.nonceCookie);
    return function (server) {
        server.auth.strategy(options.name, 'bell', options.strategy);
        server.state(options.name + "-nonce", cookieOptions);
        server.route({
            method: ['GET', 'POST'],
            path: "/" + options.name,
            handler: function (request, reply) {
                return options.handler(request)
                    .then(function (s) {
                    reply(s)
                        .type('text/html')
                        .unstate(options.name + "-nonce");
                });
            },
            config: {
                auth: options.name,
                state: {
                    parse: true,
                }
            }
        });
    };
}
function configureAuth(c) {
    var plugin = function (s, _, next) {
        s.route({
            method: 'GET',
            path: '',
            handler: function (request, reply) {
                reply("\n          <html>\n            <head><meta http-equiv=\"refresh\" content=\"5; url=" + c.authRoot + "/" + request.query['method'] + "\" /></head>\n            <body>REDIRECTING " + request.query['method'] + " / " + request.query['nonce'] + "</body>\n          </html>\n        ")
                    .type('text/html')
                    .state(request.query['method'] + "-nonce", { nonce: request.query['nonce'] });
            },
            config: {
                validate: {
                    query: {
                        method: Joi.string().required(),
                        nonce: Joi.string().required(),
                    }
                }
            },
        });
        c.authTypes.forEach(function (t) { return routeGen(t, c)(s); });
        next();
    };
    plugin.attributes = {
        version: '1.0.0',
        name: 'authentication',
    };
    return plugin;
}
exports.configureAuth = configureAuth;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUM7UUFDNUMsSUFBSSxFQUFFLENBQUM7SUFDVCxDQUFDLENBQUM7SUFDRixNQUFNLENBQUMsVUFBVSxHQUFHO1FBQ2xCLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxnQkFBZ0I7S0FDdkIsQ0FBQztJQUNGLE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQWhDRCxzQ0FnQ0MiLCJmaWxlIjoiYXV0aGVudGljYXRpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBKb2kgZnJvbSAnam9pJztcbmltcG9ydCAqIGFzIEhhcGkgZnJvbSAnaGFwaSc7XG5pbXBvcnQgKiBhcyBCZWxsIGZyb20gJ2JlbGwnO1xuaW1wb3J0IHsgU3RydXRDb25maWcgfSBmcm9tICcuL3NlcnZlcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXV0aGVudGljYXRpb25UeXBlIHtcbiAgbmFtZTogc3RyaW5nO1xuICBoYW5kbGVyOiAocjogSGFwaS5SZXF1ZXN0KSA9PiBQcm9taXNlPHN0cmluZz47XG4gIHN0cmF0ZWd5OiB7XG4gICAgcHJvdmlkZXI6IHN0cmluZztcbiAgICBwYXNzd29yZD86IHN0cmluZztcbiAgICBjb29raWU6IHN0cmluZztcbiAgICBzY29wZTogc3RyaW5nW107XG4gICAgY2xpZW50SWQ6IHN0cmluZztcbiAgICBjbGllbnRTZWNyZXQ6IHN0cmluZztcbiAgICBpc1NlY3VyZTogYm9vbGVhbjtcbiAgICBmb3JjZUh0dHBzOiBib29sZWFuO1xuICAgIHByb3ZpZGVyUGFyYW1zPzogYW55LFxuICB9O1xuICBub25jZUNvb2tpZT86IEhhcGkuU2VydmVyU3RhdGVDb29raWVDb25maWd1YXRpb25PYmplY3Q7XG59XG5cbmZ1bmN0aW9uIHJvdXRlR2VuKG9wdGlvbnM6IEF1dGhlbnRpY2F0aW9uVHlwZSwgYzogU3RydXRDb25maWcpIHtcbiAgY29uc3QgY29va2llT3B0aW9uczogSGFwaS5TZXJ2ZXJTdGF0ZUNvb2tpZUNvbmZpZ3VhdGlvbk9iamVjdCA9IE9iamVjdC5hc3NpZ24oXG4gICAge30sIHtcbiAgICAgIHR0bDogbnVsbCxcbiAgICAgIGlzU2VjdXJlOiB0cnVlLFxuICAgICAgaXNIdHRwT25seTogdHJ1ZSxcbiAgICAgIGVuY29kaW5nOiAnYmFzZTY0anNvbicsXG4gICAgICBpc1NhbWVTaXRlOiBmYWxzZSxcbiAgICAgIGNsZWFySW52YWxpZDogZmFsc2UsIC8vIHJlbW92ZSBpbnZhbGlkIGNvb2tpZXNcbiAgICAgIHN0cmljdEhlYWRlcjogdHJ1ZSwgLy8gZG9uJ3QgYWxsb3cgdmlvbGF0aW9ucyBvZiBSRkMgNjI2NVxuICAgIH0sXG4gICAgb3B0aW9ucy5ub25jZUNvb2tpZVxuICApO1xuICByZXR1cm4gKHNlcnZlcikgPT4ge1xuICAgIHNlcnZlci5hdXRoLnN0cmF0ZWd5KG9wdGlvbnMubmFtZSwgJ2JlbGwnLCBvcHRpb25zLnN0cmF0ZWd5KTtcbiAgICBzZXJ2ZXIuc3RhdGUoYCR7b3B0aW9ucy5uYW1lfS1ub25jZWAsIGNvb2tpZU9wdGlvbnMpO1xuICAgIHNlcnZlci5yb3V0ZSh7XG4gICAgICBtZXRob2Q6IFsnR0VUJywgJ1BPU1QnXSxcbiAgICAgIHBhdGg6IGAvJHtvcHRpb25zLm5hbWV9YCxcbiAgICAgIGhhbmRsZXI6IChyZXF1ZXN0OiBIYXBpLlJlcXVlc3QsIHJlcGx5OiBIYXBpLkJhc2VfUmVwbHkpID0+IHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMuaGFuZGxlcihyZXF1ZXN0KVxuICAgICAgICAudGhlbigoczogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgcmVwbHkocylcbiAgICAgICAgICAudHlwZSgndGV4dC9odG1sJylcbiAgICAgICAgICAudW5zdGF0ZShgJHtvcHRpb25zLm5hbWV9LW5vbmNlYCk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGNvbmZpZzoge1xuICAgICAgICBhdXRoOiBvcHRpb25zLm5hbWUsXG4gICAgICAgIHN0YXRlOiB7XG4gICAgICAgICAgcGFyc2U6IHRydWUsXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbmZpZ3VyZUF1dGgoYzogU3RydXRDb25maWcpIHtcbiAgY29uc3QgcGx1Z2luOiBIYXBpLlBsdWdpbkZ1bmN0aW9uPHsgdmVyc2lvbjogc3RyaW5nLCBuYW1lOiBzdHJpbmcgfT4gPSBmdW5jdGlvbihzLCBfLCBuZXh0KSB7XG4gICAgcy5yb3V0ZSh7XG4gICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgcGF0aDogJycsXG4gICAgICBoYW5kbGVyOiAocmVxdWVzdDogSGFwaS5SZXF1ZXN0LCByZXBseTogSGFwaS5CYXNlX1JlcGx5KSA9PiB7XG4gICAgICAgIHJlcGx5KGBcbiAgICAgICAgICA8aHRtbD5cbiAgICAgICAgICAgIDxoZWFkPjxtZXRhIGh0dHAtZXF1aXY9XCJyZWZyZXNoXCIgY29udGVudD1cIjU7IHVybD0ke2MuYXV0aFJvb3R9LyR7cmVxdWVzdC5xdWVyeVsnbWV0aG9kJ119XCIgLz48L2hlYWQ+XG4gICAgICAgICAgICA8Ym9keT5SRURJUkVDVElORyAke3JlcXVlc3QucXVlcnlbJ21ldGhvZCddfSAvICR7cmVxdWVzdC5xdWVyeVsnbm9uY2UnXX08L2JvZHk+XG4gICAgICAgICAgPC9odG1sPlxuICAgICAgICBgKVxuICAgICAgICAudHlwZSgndGV4dC9odG1sJylcbiAgICAgICAgLnN0YXRlKGAke3JlcXVlc3QucXVlcnlbJ21ldGhvZCddfS1ub25jZWAsIHsgbm9uY2U6IHJlcXVlc3QucXVlcnlbJ25vbmNlJ10gfSk7XG4gICAgICB9LFxuICAgICAgY29uZmlnOiB7XG4gICAgICAgIHZhbGlkYXRlOiB7XG4gICAgICAgICAgcXVlcnk6IHtcbiAgICAgICAgICAgIG1ldGhvZDogSm9pLnN0cmluZygpLnJlcXVpcmVkKCksXG4gICAgICAgICAgICBub25jZTogSm9pLnN0cmluZygpLnJlcXVpcmVkKCksXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0pO1xuICAgIGMuYXV0aFR5cGVzLmZvckVhY2godCA9PiByb3V0ZUdlbih0LCBjKShzKSk7XG4gICAgbmV4dCgpO1xuICB9O1xuICBwbHVnaW4uYXR0cmlidXRlcyA9IHtcbiAgICB2ZXJzaW9uOiAnMS4wLjAnLFxuICAgIG5hbWU6ICdhdXRoZW50aWNhdGlvbicsXG4gIH07XG4gIHJldHVybiBwbHVnaW47XG59XG4iXX0=
