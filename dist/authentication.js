"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Joi = require("joi");
function routeGen(options, strut) {
    var cookieOptions = Object.assign({}, {
        ttl: null,
        isSecure: true,
        isHttpOnly: true,
        encoding: 'base64json',
        isSameSite: false,
        clearInvalid: false,
        strictHeader: true,
    }, options.nonceCookie);
    var routeHandler = function (request, reply) {
        return options.handler(request, strut).then(function (r) {
            strut.io
                .to(request.state[options.name + "-nonce"].nonce)
                .emit(request.state[options.name + "-nonce"].nonce, {
                status: 'success',
                token: r.token,
            });
            reply(r.response).type('text/html').unstate(options.name + "-nonce");
        });
    };
    return function (server) {
        server.auth.strategy(options.name, 'bell', options.strategy);
        server.state(options.name + "-nonce", cookieOptions);
        server.route({
            method: ['GET', 'POST'],
            path: "/" + options.name,
            handler: routeHandler,
            config: {
                auth: options.name,
                state: {
                    parse: true,
                },
            },
        });
    };
}
function configureAuth(strut) {
    var plugin = function (s, _, next) {
        s.route({
            method: 'GET',
            path: '',
            handler: function (request, reply) {
                reply("\n          <html>\n            <head><meta http-equiv=\"refresh\" content=\"5; url=" + strut.config
                    .authRoot + "/" + request.query['method'] + "\" /></head>\n            <body>REDIRECTING " + request.query['method'] + " / " + request.query['nonce'] + "</body>\n          </html>\n        ")
                    .type('text/html')
                    .state(request.query['method'] + "-nonce", {
                    nonce: request.query['nonce'],
                });
            },
            config: {
                validate: {
                    query: {
                        method: Joi.string().required(),
                        nonce: Joi.string().required(),
                    },
                },
            },
        });
        strut.config.authTypes.forEach(function (t) { return routeGen(t, strut)(s); });
        next();
    };
    plugin.attributes = {
        version: '1.0.0',
        name: 'authentication',
    };
    return plugin;
}
exports.configureAuth = configureAuth;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUNELE1BQU0sRUFBRTtnQkFDTixRQUFRLEVBQUU7b0JBQ1IsS0FBSyxFQUFFO3dCQUNMLE1BQU0sRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO3dCQUMvQixLQUFLLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtxQkFDL0I7aUJBQ0Y7YUFDRjtTQUNGLENBQUMsQ0FBQztRQUNILEtBQUssQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLFFBQVEsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQXJCLENBQXFCLENBQUMsQ0FBQztRQUMzRCxJQUFJLEVBQUUsQ0FBQztJQUNULENBQUMsQ0FBQztJQUNGLE1BQU0sQ0FBQyxVQUFVLEdBQUc7UUFDbEIsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLGdCQUFnQjtLQUN2QixDQUFDO0lBQ0YsTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBMUNELHNDQTBDQyIsImZpbGUiOiJhdXRoZW50aWNhdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEpvaSBmcm9tICdqb2knO1xuaW1wb3J0ICogYXMgSGFwaSBmcm9tICdoYXBpJztcbmltcG9ydCAqIGFzIEJlbGwgZnJvbSAnYmVsbCc7XG5pbXBvcnQgeyBTdHJ1dENvbmZpZywgU3RydXRTZXJ2ZXIgfSBmcm9tICcuL3NlcnZlcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXV0aGVudGljYXRpb25SZXNwb25zZSB7XG4gIHJlc3BvbnNlOiBzdHJpbmc7XG4gIHRva2VuOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXV0aGVudGljYXRpb25IYW5kbGVyIHtcbiAgKHI6IEhhcGkuUmVxdWVzdCwgc3RydXQ6IFN0cnV0U2VydmVyKTogUHJvbWlzZTxBdXRoZW50aWNhdGlvblJlc3BvbnNlPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBdXRoZW50aWNhdGlvblR5cGUge1xuICBuYW1lOiBzdHJpbmc7XG4gIHVybDogc3RyaW5nO1xuICBpY29uVXJsPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEF1dGhlbnRpY2F0aW9uU3RyYXRlZ3kge1xuICBuYW1lOiBzdHJpbmc7XG4gIGhhbmRsZXI6IEF1dGhlbnRpY2F0aW9uSGFuZGxlcjtcbiAgaWNvblVybD86IHN0cmluZztcbiAgc3RyYXRlZ3k6IHtcbiAgICBwcm92aWRlcjogc3RyaW5nO1xuICAgIHBhc3N3b3JkPzogc3RyaW5nO1xuICAgIGNvb2tpZTogc3RyaW5nO1xuICAgIHNjb3BlOiBzdHJpbmdbXTtcbiAgICBjbGllbnRJZDogc3RyaW5nO1xuICAgIGNsaWVudFNlY3JldDogc3RyaW5nO1xuICAgIGlzU2VjdXJlOiBib29sZWFuO1xuICAgIGZvcmNlSHR0cHM6IGJvb2xlYW47XG4gICAgcHJvdmlkZXJQYXJhbXM/OiBhbnk7XG4gIH07XG4gIG5vbmNlQ29va2llPzogSGFwaS5TZXJ2ZXJTdGF0ZUNvb2tpZUNvbmZpZ3VhdGlvbk9iamVjdDtcbn1cblxuZnVuY3Rpb24gcm91dGVHZW4ob3B0aW9uczogQXV0aGVudGljYXRpb25TdHJhdGVneSwgc3RydXQ6IFN0cnV0U2VydmVyKSB7XG4gIGNvbnN0IGNvb2tpZU9wdGlvbnM6IEhhcGkuU2VydmVyU3RhdGVDb29raWVDb25maWd1YXRpb25PYmplY3QgPSBPYmplY3QuYXNzaWduKFxuICAgIHt9LFxuICAgIHtcbiAgICAgIHR0bDogbnVsbCxcbiAgICAgIGlzU2VjdXJlOiB0cnVlLFxuICAgICAgaXNIdHRwT25seTogdHJ1ZSxcbiAgICAgIGVuY29kaW5nOiAnYmFzZTY0anNvbicsXG4gICAgICBpc1NhbWVTaXRlOiBmYWxzZSxcbiAgICAgIGNsZWFySW52YWxpZDogZmFsc2UsIC8vIHJlbW92ZSBpbnZhbGlkIGNvb2tpZXNcbiAgICAgIHN0cmljdEhlYWRlcjogdHJ1ZSwgLy8gZG9uJ3QgYWxsb3cgdmlvbGF0aW9ucyBvZiBSRkMgNjI2NVxuICAgIH0sXG4gICAgb3B0aW9ucy5ub25jZUNvb2tpZSxcbiAgKTtcbiAgY29uc3Qgcm91dGVIYW5kbGVyOiBIYXBpLlJvdXRlSGFuZGxlciA9IChyZXF1ZXN0LCByZXBseSkgPT4ge1xuICAgIHJldHVybiBvcHRpb25zLmhhbmRsZXIocmVxdWVzdCwgc3RydXQpLnRoZW4ociA9PiB7XG4gICAgICBzdHJ1dC5pb1xuICAgICAgICAudG8ocmVxdWVzdC5zdGF0ZVtgJHtvcHRpb25zLm5hbWV9LW5vbmNlYF0ubm9uY2UpXG4gICAgICAgIC5lbWl0KHJlcXVlc3Quc3RhdGVbYCR7b3B0aW9ucy5uYW1lfS1ub25jZWBdLm5vbmNlLCB7XG4gICAgICAgICAgc3RhdHVzOiAnc3VjY2VzcycsXG4gICAgICAgICAgdG9rZW46IHIudG9rZW4sXG4gICAgICAgIH0pO1xuICAgICAgcmVwbHkoci5yZXNwb25zZSkudHlwZSgndGV4dC9odG1sJykudW5zdGF0ZShgJHtvcHRpb25zLm5hbWV9LW5vbmNlYCk7XG4gICAgfSk7XG4gIH07XG4gIHJldHVybiBzZXJ2ZXIgPT4ge1xuICAgIHNlcnZlci5hdXRoLnN0cmF0ZWd5KG9wdGlvbnMubmFtZSwgJ2JlbGwnLCBvcHRpb25zLnN0cmF0ZWd5KTtcbiAgICBzZXJ2ZXIuc3RhdGUoYCR7b3B0aW9ucy5uYW1lfS1ub25jZWAsIGNvb2tpZU9wdGlvbnMpO1xuICAgIHNlcnZlci5yb3V0ZSh7XG4gICAgICBtZXRob2Q6IFsnR0VUJywgJ1BPU1QnXSxcbiAgICAgIHBhdGg6IGAvJHtvcHRpb25zLm5hbWV9YCxcbiAgICAgIGhhbmRsZXI6IHJvdXRlSGFuZGxlcixcbiAgICAgIGNvbmZpZzoge1xuICAgICAgICBhdXRoOiBvcHRpb25zLm5hbWUsXG4gICAgICAgIHN0YXRlOiB7XG4gICAgICAgICAgcGFyc2U6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29uZmlndXJlQXV0aChzdHJ1dDogU3RydXRTZXJ2ZXIpIHtcbiAgY29uc3QgcGx1Z2luOiBIYXBpLlBsdWdpbkZ1bmN0aW9uPHtcbiAgICB2ZXJzaW9uOiBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xuICB9PiA9IGZ1bmN0aW9uKHMsIF8sIG5leHQpIHtcbiAgICBzLnJvdXRlKHtcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICBwYXRoOiAnJyxcbiAgICAgIGhhbmRsZXI6IChyZXF1ZXN0OiBIYXBpLlJlcXVlc3QsIHJlcGx5OiBIYXBpLkJhc2VfUmVwbHkpID0+IHtcbiAgICAgICAgcmVwbHkoXG4gICAgICAgICAgYFxuICAgICAgICAgIDxodG1sPlxuICAgICAgICAgICAgPGhlYWQ+PG1ldGEgaHR0cC1lcXVpdj1cInJlZnJlc2hcIiBjb250ZW50PVwiNTsgdXJsPSR7c3RydXQuY29uZmlnXG4gICAgICAgICAgICAgIC5hdXRoUm9vdH0vJHtyZXF1ZXN0LnF1ZXJ5WydtZXRob2QnXX1cIiAvPjwvaGVhZD5cbiAgICAgICAgICAgIDxib2R5PlJFRElSRUNUSU5HICR7cmVxdWVzdC5xdWVyeVsnbWV0aG9kJ119IC8gJHtyZXF1ZXN0LnF1ZXJ5W1xuICAgICAgICAgICAgJ25vbmNlJ1xuICAgICAgICAgIF19PC9ib2R5PlxuICAgICAgICAgIDwvaHRtbD5cbiAgICAgICAgYCxcbiAgICAgICAgKVxuICAgICAgICAgIC50eXBlKCd0ZXh0L2h0bWwnKVxuICAgICAgICAgIC5zdGF0ZShgJHtyZXF1ZXN0LnF1ZXJ5WydtZXRob2QnXX0tbm9uY2VgLCB7XG4gICAgICAgICAgICBub25jZTogcmVxdWVzdC5xdWVyeVsnbm9uY2UnXSxcbiAgICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBjb25maWc6IHtcbiAgICAgICAgdmFsaWRhdGU6IHtcbiAgICAgICAgICBxdWVyeToge1xuICAgICAgICAgICAgbWV0aG9kOiBKb2kuc3RyaW5nKCkucmVxdWlyZWQoKSxcbiAgICAgICAgICAgIG5vbmNlOiBKb2kuc3RyaW5nKCkucmVxdWlyZWQoKSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcbiAgICBzdHJ1dC5jb25maWcuYXV0aFR5cGVzLmZvckVhY2godCA9PiByb3V0ZUdlbih0LCBzdHJ1dCkocykpO1xuICAgIG5leHQoKTtcbiAgfTtcbiAgcGx1Z2luLmF0dHJpYnV0ZXMgPSB7XG4gICAgdmVyc2lvbjogJzEuMC4wJyxcbiAgICBuYW1lOiAnYXV0aGVudGljYXRpb24nLFxuICB9O1xuICByZXR1cm4gcGx1Z2luO1xufVxuIl19
