"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function test(msg, server) {
    var response = {
        response: 'testkey',
    };
    return server.services.tokenStore
        .tokenToUser(msg.key)
        .then(function (v) {
        if (!!v) {
            response.you = v;
            response.auth = true;
            response.token = msg.key;
            if (server.extensions['loginExtras']) {
                return server.extensions['loginExtras'](v)
                    .then(function (r) { return (response.included = r); });
            }
        }
        else {
            response.auth = false;
        }
    })
        .then(function () { return response; });
}
function authenticationChannelDispatch(msg, server) {
    if (msg.request === 'startauth') {
        msg.client.join(msg.nonce);
        return Promise.resolve({
            response: msg.request,
            types: server.config.authTypes.map(function (v) {
                return {
                    name: v.name,
                    iconUrl: v.iconUrl,
                    url: "" + server.baseUrl() + server.config
                        .authRoot + "?method=" + v.name + "&nonce=" + msg.nonce,
                };
            }),
        });
    }
    else if (msg.request === 'testkey') {
        return test(msg, server);
    }
    else {
        return Promise.resolve({
            response: 'invalidRequest',
        });
    }
}
exports.authenticationChannelDispatch = authenticationChannelDispatch;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hdXRoZW50aWNhdGlvbi5jaGFubmVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBV0EsY0FDRSxHQUFpQyxFQUNqQyxNQUFtQjtJQUVuQixJQUFNLFFBQVEsR0FBUTtRQUNwQixRQUFRLEVBQUUsU0FBUztLQUNwQixDQUFDO0lBQ0YsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBVTtTQUM5QixXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztTQUNwQixJQUFJLENBQUMsVUFBQSxDQUFDO1FBQ0wsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDUixRQUFRLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztZQUNqQixRQUFRLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztZQUNyQixRQUFRLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUM7WUFDekIsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUNyQixhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7cUJBQ2pCLElBQUksQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsRUFBdkIsQ0FBdUIsQ0FBQyxDQUFDO1lBQ3hDLENBQUM7UUFDSCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixRQUFRLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztRQUN4QixDQUFDO0lBQ0gsQ0FBQyxDQUFDO1NBQ0QsSUFBSSxDQUFDLGNBQU0sT0FBQSxRQUFRLEVBQVIsQ0FBUSxDQUFDLENBQUM7QUFDMUIsQ0FBQztBQUVELHVDQUNFLEdBQTBCLEVBQzFCLE1BQW1CO0lBRW5CLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQztRQUNoQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFHM0IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7WUFDckIsUUFBUSxFQUFFLEdBQUcsQ0FBQyxPQUFPO1lBQ3JCLEtBQUssRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDO2dCQUNsQyxNQUFNLENBQUM7b0JBQ0wsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJO29CQUNaLE9BQU8sRUFBRSxDQUFDLENBQUMsT0FBTztvQkFDbEIsR0FBRyxFQUFFLEtBQUcsTUFBTSxDQUFDLE9BQU8sRUFBRSxHQUFHLE1BQU0sQ0FBQyxNQUFNO3lCQUNyQyxRQUFRLGdCQUFXLENBQUMsQ0FBQyxJQUFJLGVBQVUsR0FBRyxDQUFDLEtBQU87aUJBQ2xELENBQUM7WUFDSixDQUFDLENBQUM7U0FDSCxDQUFDLENBQUM7SUFDTCxDQUFDO0lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztRQUNyQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDTixNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBeUI7WUFDN0MsUUFBUSxFQUFFLGdCQUFnQjtTQUMzQixDQUFDLENBQUM7SUFDTCxDQUFDO0FBQ0gsQ0FBQztBQTFCRCxzRUEwQkMiLCJmaWxlIjoiYXV0aGVudGljYXRpb24uY2hhbm5lbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFNvY2tldElPIGZyb20gJ3NvY2tldC5pbyc7XG5pbXBvcnQge1xuICBDaGFubmVsUmVxdWVzdCxcbiAgU3RydXRTZXJ2ZXIsXG4gIFNpbmdsZXRvblJlcXVlc3QsXG4gIEF1dGhlbnRpY2F0aW9uUmVxdWVzdCxcbiAgVGVzdEtleUF1dGhlbnRpY2F0aW9uUmVxdWVzdCxcbiAgVGVzdFJlc3BvbnNlLFxuICBBdXRoZW50aWNhdGlvblJlc3BvbnNlLFxufSBmcm9tICcuL2RhdGFUeXBlcyc7XG5cbmZ1bmN0aW9uIHRlc3QoXG4gIG1zZzogVGVzdEtleUF1dGhlbnRpY2F0aW9uUmVxdWVzdCxcbiAgc2VydmVyOiBTdHJ1dFNlcnZlcixcbik6IFByb21pc2U8VGVzdFJlc3BvbnNlPiB7XG4gIGNvbnN0IHJlc3BvbnNlOiBhbnkgPSB7XG4gICAgcmVzcG9uc2U6ICd0ZXN0a2V5JyxcbiAgfTtcbiAgcmV0dXJuIHNlcnZlci5zZXJ2aWNlcy50b2tlblN0b3JlXG4gICAgLnRva2VuVG9Vc2VyKG1zZy5rZXkpXG4gICAgLnRoZW4odiA9PiB7XG4gICAgICBpZiAoISF2KSB7XG4gICAgICAgIHJlc3BvbnNlLnlvdSA9IHY7XG4gICAgICAgIHJlc3BvbnNlLmF1dGggPSB0cnVlO1xuICAgICAgICByZXNwb25zZS50b2tlbiA9IG1zZy5rZXk7XG4gICAgICAgIGlmIChzZXJ2ZXIuZXh0ZW5zaW9uc1snbG9naW5FeHRyYXMnXSkge1xuICAgICAgICAgIHJldHVybiBzZXJ2ZXIuZXh0ZW5zaW9uc1xuICAgICAgICAgICAgWydsb2dpbkV4dHJhcyddKHYpXG4gICAgICAgICAgICAudGhlbihyID0+IChyZXNwb25zZS5pbmNsdWRlZCA9IHIpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzcG9uc2UuYXV0aCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0pXG4gICAgLnRoZW4oKCkgPT4gcmVzcG9uc2UpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXV0aGVudGljYXRpb25DaGFubmVsRGlzcGF0Y2goXG4gIG1zZzogQXV0aGVudGljYXRpb25SZXF1ZXN0LFxuICBzZXJ2ZXI6IFN0cnV0U2VydmVyLFxuKTogUHJvbWlzZTxBdXRoZW50aWNhdGlvblJlc3BvbnNlPiB7XG4gIGlmIChtc2cucmVxdWVzdCA9PT0gJ3N0YXJ0YXV0aCcpIHtcbiAgICBtc2cuY2xpZW50LmpvaW4obXNnLm5vbmNlKTtcbiAgICAvLyB0aGlzIG5vbmNlIGV4cGlyZXMgaW4gZml2ZSBtaW51dGVzLlxuICAgIC8vIHNldFRpbWVvdXQoKCkgPT4gbXNnLmNsaWVudC5sZWF2ZShtc2cubm9uY2UpLCA1ICogNjAgKiAxMDAwKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgIHJlc3BvbnNlOiBtc2cucmVxdWVzdCxcbiAgICAgIHR5cGVzOiBzZXJ2ZXIuY29uZmlnLmF1dGhUeXBlcy5tYXAodiA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbmFtZTogdi5uYW1lLFxuICAgICAgICAgIGljb25Vcmw6IHYuaWNvblVybCxcbiAgICAgICAgICB1cmw6IGAke3NlcnZlci5iYXNlVXJsKCl9JHtzZXJ2ZXIuY29uZmlnXG4gICAgICAgICAgICAuYXV0aFJvb3R9P21ldGhvZD0ke3YubmFtZX0mbm9uY2U9JHttc2cubm9uY2V9YCxcbiAgICAgICAgfTtcbiAgICAgIH0pLFxuICAgIH0pO1xuICB9IGVsc2UgaWYgKG1zZy5yZXF1ZXN0ID09PSAndGVzdGtleScpIHtcbiAgICByZXR1cm4gdGVzdChtc2csIHNlcnZlcik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZTxBdXRoZW50aWNhdGlvblJlc3BvbnNlPih7XG4gICAgICByZXNwb25zZTogJ2ludmFsaWRSZXF1ZXN0JyxcbiAgICB9KTtcbiAgfVxufVxuIl19
