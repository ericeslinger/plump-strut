"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function filter(input, f) {
    var rV = {
        id: input.id,
        type: input.type,
        relationships: {},
        attributes: {},
    };
    ['attributes', 'relationships'].forEach(function (thing) {
        if (input[thing]) {
            Object.keys(input[thing]).forEach(function (a) {
                if ((f.type === 'white' && f[thing] && f[thing].indexOf(a) >= 0) ||
                    (f.type === 'black' && (!f[thing] || !(f[thing].indexOf(a) >= 0)))) {
                    rV[thing][a] = input[thing][a];
                }
            });
        }
    });
    return rV;
}
var Oracle = (function () {
    function Oracle(keyService) {
        this.keyService = keyService;
        this.authorizers = {};
        this.filters = {};
    }
    Oracle.prototype.addAuthorizer = function (auth, forType) {
        this.authorizers[forType] = auth;
    };
    Oracle.prototype.filter = function (md) {
        if (this.filters[md.type]) {
            return filter(md, this.filters[md.type]);
        }
        else {
            return md;
        }
    };
    Oracle.prototype.addFilter = function (f, forType) {
        this.filters[forType] = f;
    };
    Oracle.prototype.dispatch = function (request) {
        var _this = this;
        return Promise.resolve()
            .then(function () {
            if (request.kind === 'compound') {
                return Promise.all(request.list.map(function (v) { return _this.dispatch(v); }))
                    .then(function (res) {
                    return request.combinator === 'or'
                        ? res.some(function (v) { return v.result; })
                        : res.every(function (v) { return v.result; });
                })
                    .then(function (f) { return ({ kind: 'final', result: f }); });
            }
            else {
                return _this.authorizers[request.target.type].authorize(request);
            }
        })
            .then(function (v) {
            if (v.kind === 'final') {
                return v;
            }
            else if (v.kind === 'delegated') {
                return _this.dispatch(v.delegate);
            }
        });
    };
    Oracle.prototype.authorize = function (request) {
        return this.dispatch(request).then(function (f) { return f.result; });
    };
    return Oracle;
}());
exports.Oracle = Oracle;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LENBQUMsTUFBTSxFQUFSLENBQVEsQ0FBQyxDQUFDO0lBQzlFLENBQUM7SUFDSCxhQUFDO0FBQUQsQ0FsREEsQUFrREMsSUFBQTtBQWxEWSx3QkFBTSIsImZpbGUiOiJvcmFjbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBdXRob3JpemVyRGVmaW5pdGlvbixcbiAgQXV0aG9yaXplUmVxdWVzdCxcbiAgQXV0aG9yaXplUmVzcG9uc2UsXG4gIEZpbmFsQXV0aG9yaXplUmVzcG9uc2UsXG4gIEtleVNlcnZpY2UsXG4gIElPcmFjbGUsXG4gIEZpbHRlckRlZmluaXRpb24sXG4gIFJvdXRlT3B0aW9ucyxcbn0gZnJvbSAnLi9kYXRhVHlwZXMnO1xuXG5pbXBvcnQgeyBNb2RlbERhdGEgfSBmcm9tICdwbHVtcCc7XG5cbmltcG9ydCB7IFJlcXVlc3QgfSBmcm9tICdoYXBpJztcblxuZnVuY3Rpb24gZmlsdGVyKGlucHV0OiBNb2RlbERhdGEsIGY6IEZpbHRlckRlZmluaXRpb24pOiBNb2RlbERhdGEge1xuICBjb25zdCByViA9IHtcbiAgICBpZDogaW5wdXQuaWQsXG4gICAgdHlwZTogaW5wdXQudHlwZSxcbiAgICByZWxhdGlvbnNoaXBzOiB7fSxcbiAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgfTtcbiAgWydhdHRyaWJ1dGVzJywgJ3JlbGF0aW9uc2hpcHMnXS5mb3JFYWNoKHRoaW5nID0+IHtcbiAgICBpZiAoaW5wdXRbdGhpbmddKSB7XG4gICAgICBPYmplY3Qua2V5cyhpbnB1dFt0aGluZ10pLmZvckVhY2goYSA9PiB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAoZi50eXBlID09PSAnd2hpdGUnICYmIGZbdGhpbmddICYmIGZbdGhpbmddLmluZGV4T2YoYSkgPj0gMCkgfHxcbiAgICAgICAgICAoZi50eXBlID09PSAnYmxhY2snICYmICghZlt0aGluZ10gfHwgIShmW3RoaW5nXS5pbmRleE9mKGEpID49IDApKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgclZbdGhpbmddW2FdID0gaW5wdXRbdGhpbmddW2FdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gclYgYXMgTW9kZWxEYXRhO1xufVxuXG5leHBvcnQgY2xhc3MgT3JhY2xlIGltcGxlbWVudHMgSU9yYWNsZSB7XG4gIHB1YmxpYyBhdXRob3JpemVyczogeyBbbmFtZTogc3RyaW5nXTogQXV0aG9yaXplckRlZmluaXRpb24gfSA9IHt9O1xuICBwdWJsaWMgZmlsdGVyczogeyBbbmFtZTogc3RyaW5nXTogRmlsdGVyRGVmaW5pdGlvbiB9ID0ge307XG5cbiAgY29uc3RydWN0b3IocHVibGljIGtleVNlcnZpY2U/OiBLZXlTZXJ2aWNlKSB7fVxuXG4gIGFkZEF1dGhvcml6ZXIoYXV0aDogQXV0aG9yaXplckRlZmluaXRpb24sIGZvclR5cGU6IHN0cmluZykge1xuICAgIHRoaXMuYXV0aG9yaXplcnNbZm9yVHlwZV0gPSBhdXRoO1xuICB9XG5cbiAgZmlsdGVyKG1kOiBNb2RlbERhdGEpOiBNb2RlbERhdGEge1xuICAgIGlmICh0aGlzLmZpbHRlcnNbbWQudHlwZV0pIHtcbiAgICAgIHJldHVybiBmaWx0ZXIobWQsIHRoaXMuZmlsdGVyc1ttZC50eXBlXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtZDtcbiAgICB9XG4gIH1cblxuICBhZGRGaWx0ZXIoZjogRmlsdGVyRGVmaW5pdGlvbiwgZm9yVHlwZTogc3RyaW5nKSB7XG4gICAgdGhpcy5maWx0ZXJzW2ZvclR5cGVdID0gZjtcbiAgfVxuXG4gIGRpc3BhdGNoKHJlcXVlc3Q6IEF1dGhvcml6ZVJlcXVlc3QpOiBQcm9taXNlPEZpbmFsQXV0aG9yaXplUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgIC50aGVuPEF1dGhvcml6ZVJlc3BvbnNlPigoKSA9PiB7XG4gICAgICAgIGlmIChyZXF1ZXN0LmtpbmQgPT09ICdjb21wb3VuZCcpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocmVxdWVzdC5saXN0Lm1hcCh2ID0+IHRoaXMuZGlzcGF0Y2godikpKVxuICAgICAgICAgICAgLnRoZW4oXG4gICAgICAgICAgICAgIChyZXM6IEZpbmFsQXV0aG9yaXplUmVzcG9uc2VbXSkgPT5cbiAgICAgICAgICAgICAgICByZXF1ZXN0LmNvbWJpbmF0b3IgPT09ICdvcidcbiAgICAgICAgICAgICAgICAgID8gcmVzLnNvbWUodiA9PiB2LnJlc3VsdClcbiAgICAgICAgICAgICAgICAgIDogcmVzLmV2ZXJ5KHYgPT4gdi5yZXN1bHQpLFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLnRoZW48RmluYWxBdXRob3JpemVSZXNwb25zZT4oZiA9PiAoeyBraW5kOiAnZmluYWwnLCByZXN1bHQ6IGYgfSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0aGlzLmF1dGhvcml6ZXJzW3JlcXVlc3QudGFyZ2V0LnR5cGVdLmF1dGhvcml6ZShyZXF1ZXN0KTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC50aGVuKHYgPT4ge1xuICAgICAgICBpZiAodi5raW5kID09PSAnZmluYWwnKSB7XG4gICAgICAgICAgcmV0dXJuIHY7XG4gICAgICAgIH0gZWxzZSBpZiAodi5raW5kID09PSAnZGVsZWdhdGVkJykge1xuICAgICAgICAgIHJldHVybiB0aGlzLmRpc3BhdGNoKHYuZGVsZWdhdGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIGF1dGhvcml6ZShyZXF1ZXN0OiBBdXRob3JpemVSZXF1ZXN0KTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2gocmVxdWVzdCkudGhlbigoZjogRmluYWxBdXRob3JpemVSZXNwb25zZSkgPT4gZi5yZXN1bHQpO1xuICB9XG59XG4iXX0=
